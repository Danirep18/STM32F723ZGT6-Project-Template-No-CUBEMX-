
H7_HSE_SYSCLK_PLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004208  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080044d8  080044d8  000054d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800460c  0800460c  0000560c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004614  08004614  00005614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08004618  08004618  00005618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  0800461c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002d0  24000060  0800467c  00006060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000330  0800467c  00006330  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000d92d  00000000  00000000  0000608e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001827  00000000  00000000  000139bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000838  00000000  00000000  000151e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000064f  00000000  00000000  00015a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000318a5  00000000  00000000  0001606f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000cbb9  00000000  00000000  00047914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001402e0  00000000  00000000  000544cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001947ad  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002630  00000000  00000000  001947f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  00196e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000060 	.word	0x24000060
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080044c0 	.word	0x080044c0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000064 	.word	0x24000064
 800030c:	080044c0 	.word	0x080044c0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <SysTick_Handler>:
/*it.c
 *@brief: In this section all the interruptions will be placed
*/
#include "main.h"

void SysTick_Handler(void){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	 HAL_IncTick();
 80006f0:	f000 fba0 	bl	8000e34 <HAL_IncTick>
	 HAL_SYSTICK_IRQHandler();
 80006f4:	f000 fcea 	bl	80010cc <HAL_SYSTICK_IRQHandler>
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}

080006fc <main>:
RCC_ClkInitTypeDef Clk;




int main(void){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	System_Start();
 8000700:	f000 f806 	bl	8000710 <System_Start>

	while(1){
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <main+0x8>

08000708 <Error_Handler>:
	return 0;
}



void Error_Handler(){
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
	while(1);
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <Error_Handler+0x4>

08000710 <System_Start>:
#define oneMHz 1000000

void SystemClock_Config(void);
void Print_Clock_Config(void);

void System_Start(void){
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
    HAL_Init();
 8000714:	f000 fb1c 	bl	8000d50 <HAL_Init>
    Osc_Init();
 8000718:	f000 f830 	bl	800077c <Osc_Init>
    Clk_Init();
 800071c:	f000 f864 	bl	80007e8 <Clk_Init>
    UART1_Init();
 8000720:	f000 f802 	bl	8000728 <UART1_Init>

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}

08000728 <UART1_Init>:

void UART1_Init(void){
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 800072c:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <UART1_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	@ (8000778 <UART1_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8000732:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <UART1_Init+0x4c>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <UART1_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <UART1_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <UART1_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <UART1_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <UART1_Init+0x4c>)
 8000754:	220c      	movs	r2, #12
 8000756:	615a      	str	r2, [r3, #20]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <UART1_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]

    if(HAL_UART_Init(&huart1) != HAL_OK){
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <UART1_Init+0x4c>)
 8000760:	f002 f8a4 	bl	80028ac <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <UART1_Init+0x46>
        Error_Handler();
 800076a:	f7ff ffcd 	bl	8000708 <Error_Handler>
    }
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	2400007c 	.word	0x2400007c
 8000778:	40011000 	.word	0x40011000

0800077c <Osc_Init>:

void Osc_Init(void){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	memset(&Osc, 0, sizeof(Osc));
 8000780:	224c      	movs	r2, #76	@ 0x4c
 8000782:	2100      	movs	r1, #0
 8000784:	4817      	ldr	r0, [pc, #92]	@ (80007e4 <Osc_Init+0x68>)
 8000786:	f003 fa1d 	bl	8003bc4 <memset>
	Osc.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078a:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <Osc_Init+0x68>)
 800078c:	2201      	movs	r2, #1
 800078e:	601a      	str	r2, [r3, #0]
	Osc.HSEState = RCC_HSE_ON;
 8000790:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <Osc_Init+0x68>)
 8000792:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000796:	605a      	str	r2, [r3, #4]
	Osc.PLL.PLLState = RCC_PLL_ON;
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <Osc_Init+0x68>)
 800079a:	2202      	movs	r2, #2
 800079c:	625a      	str	r2, [r3, #36]	@ 0x24
	Osc.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <Osc_Init+0x68>)
 80007a0:	2202      	movs	r2, #2
 80007a2:	629a      	str	r2, [r3, #40]	@ 0x28

	Osc.PLL.PLLM = 5;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <Osc_Init+0x68>)
 80007a6:	2205      	movs	r2, #5
 80007a8:	62da      	str	r2, [r3, #44]	@ 0x2c
	Osc.PLL.PLLN = 160;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <Osc_Init+0x68>)
 80007ac:	22a0      	movs	r2, #160	@ 0xa0
 80007ae:	631a      	str	r2, [r3, #48]	@ 0x30
	Osc.PLL.PLLP = 2;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <Osc_Init+0x68>)
 80007b2:	2202      	movs	r2, #2
 80007b4:	635a      	str	r2, [r3, #52]	@ 0x34
	Osc.PLL.PLLQ = 4;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <Osc_Init+0x68>)
 80007b8:	2204      	movs	r2, #4
 80007ba:	639a      	str	r2, [r3, #56]	@ 0x38
	Osc.PLL.PLLR = 4;
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <Osc_Init+0x68>)
 80007be:	2204      	movs	r2, #4
 80007c0:	63da      	str	r2, [r3, #60]	@ 0x3c

	Osc.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <Osc_Init+0x68>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	645a      	str	r2, [r3, #68]	@ 0x44
	Osc.PLL.PLLFRACN = 0;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <Osc_Init+0x68>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	649a      	str	r2, [r3, #72]	@ 0x48

	if(HAL_RCC_OscConfig(&Osc) != HAL_OK){
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <Osc_Init+0x68>)
 80007d0:	f000 fe32 	bl	8001438 <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <Osc_Init+0x62>
		Error_Handler();
 80007da:	f7ff ff95 	bl	8000708 <Error_Handler>
	}
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	24000110 	.word	0x24000110

080007e8 <Clk_Init>:


void Clk_Init(void){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

	Clk.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80007ec:	4b8a      	ldr	r3, [pc, #552]	@ (8000a18 <Clk_Init+0x230>)
 80007ee:	223f      	movs	r2, #63	@ 0x3f
 80007f0:	601a      	str	r2, [r3, #0]
						RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
						RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_D3PCLK1;
	Clk.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f2:	4b89      	ldr	r3, [pc, #548]	@ (8000a18 <Clk_Init+0x230>)
 80007f4:	2203      	movs	r2, #3
 80007f6:	605a      	str	r2, [r3, #4]
	Clk.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007f8:	4b87      	ldr	r3, [pc, #540]	@ (8000a18 <Clk_Init+0x230>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
	Clk.AHBCLKDivider = RCC_HCLK_DIV2;
 80007fe:	4b86      	ldr	r3, [pc, #536]	@ (8000a18 <Clk_Init+0x230>)
 8000800:	2208      	movs	r2, #8
 8000802:	60da      	str	r2, [r3, #12]
	Clk.APB1CLKDivider = RCC_APB1_DIV2;
 8000804:	4b84      	ldr	r3, [pc, #528]	@ (8000a18 <Clk_Init+0x230>)
 8000806:	2240      	movs	r2, #64	@ 0x40
 8000808:	615a      	str	r2, [r3, #20]
	Clk.APB2CLKDivider = RCC_APB2_DIV2;
 800080a:	4b83      	ldr	r3, [pc, #524]	@ (8000a18 <Clk_Init+0x230>)
 800080c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000810:	619a      	str	r2, [r3, #24]
	Clk.APB3CLKDivider = RCC_APB3_DIV2;
 8000812:	4b81      	ldr	r3, [pc, #516]	@ (8000a18 <Clk_Init+0x230>)
 8000814:	2240      	movs	r2, #64	@ 0x40
 8000816:	611a      	str	r2, [r3, #16]
	Clk.APB4CLKDivider = RCC_APB4_DIV2;
 8000818:	4b7f      	ldr	r3, [pc, #508]	@ (8000a18 <Clk_Init+0x230>)
 800081a:	2240      	movs	r2, #64	@ 0x40
 800081c:	61da      	str	r2, [r3, #28]

	if(HAL_RCC_ClockConfig(&Clk, FLASH_LATENCY_DEFAULT) != HAL_OK){
 800081e:	2107      	movs	r1, #7
 8000820:	487d      	ldr	r0, [pc, #500]	@ (8000a18 <Clk_Init+0x230>)
 8000822:	f001 f9e3 	bl	8001bec <HAL_RCC_ClockConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <Clk_Init+0x48>
		Error_Handler();
 800082c:	f7ff ff6c 	bl	8000708 <Error_Handler>
	}

	__HAL_RCC_HSI_DISABLE();
 8000830:	4b7a      	ldr	r3, [pc, #488]	@ (8000a1c <Clk_Init+0x234>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a79      	ldr	r2, [pc, #484]	@ (8000a1c <Clk_Init+0x234>)
 8000836:	f023 0301 	bic.w	r3, r3, #1
 800083a:	6013      	str	r3, [r2, #0]

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800083c:	f001 fd06 	bl	800224c <HAL_RCC_GetHCLKFreq>
 8000840:	4603      	mov	r3, r0
 8000842:	4a77      	ldr	r2, [pc, #476]	@ (8000a20 <Clk_Init+0x238>)
 8000844:	fba2 2303 	umull	r2, r3, r2, r3
 8000848:	099b      	lsrs	r3, r3, #6
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fc15 	bl	800107a <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000850:	2004      	movs	r0, #4
 8000852:	f000 fc1f 	bl	8001094 <HAL_SYSTICK_CLKSourceConfig>

	UART1_Init();
 8000856:	f7ff ff67 	bl	8000728 <UART1_Init>

	memset(msg, 0, sizeof(msg));
 800085a:	2264      	movs	r2, #100	@ 0x64
 800085c:	2100      	movs	r1, #0
 800085e:	4871      	ldr	r0, [pc, #452]	@ (8000a24 <Clk_Init+0x23c>)
 8000860:	f003 f9b0 	bl	8003bc4 <memset>
	sprintf(msg, "-----------------------------------\r\n");
 8000864:	4970      	ldr	r1, [pc, #448]	@ (8000a28 <Clk_Init+0x240>)
 8000866:	486f      	ldr	r0, [pc, #444]	@ (8000a24 <Clk_Init+0x23c>)
 8000868:	f003 f98a 	bl	8003b80 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800086c:	486d      	ldr	r0, [pc, #436]	@ (8000a24 <Clk_Init+0x23c>)
 800086e:	f7ff fd4f 	bl	8000310 <strlen>
 8000872:	4603      	mov	r3, r0
 8000874:	b29a      	uxth	r2, r3
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
 800087a:	496a      	ldr	r1, [pc, #424]	@ (8000a24 <Clk_Init+0x23c>)
 800087c:	486b      	ldr	r0, [pc, #428]	@ (8000a2c <Clk_Init+0x244>)
 800087e:	f002 f865 	bl	800294c <HAL_UART_Transmit>

	memset(msg, 0, sizeof(msg));
 8000882:	2264      	movs	r2, #100	@ 0x64
 8000884:	2100      	movs	r1, #0
 8000886:	4867      	ldr	r0, [pc, #412]	@ (8000a24 <Clk_Init+0x23c>)
 8000888:	f003 f99c 	bl	8003bc4 <memset>
	sprintf(msg, "Application running (STM32H723ZGT6)\r\n");
 800088c:	4968      	ldr	r1, [pc, #416]	@ (8000a30 <Clk_Init+0x248>)
 800088e:	4865      	ldr	r0, [pc, #404]	@ (8000a24 <Clk_Init+0x23c>)
 8000890:	f003 f976 	bl	8003b80 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000894:	4863      	ldr	r0, [pc, #396]	@ (8000a24 <Clk_Init+0x23c>)
 8000896:	f7ff fd3b 	bl	8000310 <strlen>
 800089a:	4603      	mov	r3, r0
 800089c:	b29a      	uxth	r2, r3
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	4960      	ldr	r1, [pc, #384]	@ (8000a24 <Clk_Init+0x23c>)
 80008a4:	4861      	ldr	r0, [pc, #388]	@ (8000a2c <Clk_Init+0x244>)
 80008a6:	f002 f851 	bl	800294c <HAL_UART_Transmit>

	memset(msg, 0, sizeof(msg));
 80008aa:	2264      	movs	r2, #100	@ 0x64
 80008ac:	2100      	movs	r1, #0
 80008ae:	485d      	ldr	r0, [pc, #372]	@ (8000a24 <Clk_Init+0x23c>)
 80008b0:	f003 f988 	bl	8003bc4 <memset>
	sprintf(msg, "SYSCLK : %ld MHz\r\n", HAL_RCC_GetSysClockFreq()/oneMHz);
 80008b4:	f001 fb50 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 80008b8:	4603      	mov	r3, r0
 80008ba:	4a5e      	ldr	r2, [pc, #376]	@ (8000a34 <Clk_Init+0x24c>)
 80008bc:	fba2 2303 	umull	r2, r3, r2, r3
 80008c0:	0c9b      	lsrs	r3, r3, #18
 80008c2:	461a      	mov	r2, r3
 80008c4:	495c      	ldr	r1, [pc, #368]	@ (8000a38 <Clk_Init+0x250>)
 80008c6:	4857      	ldr	r0, [pc, #348]	@ (8000a24 <Clk_Init+0x23c>)
 80008c8:	f003 f95a 	bl	8003b80 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80008cc:	4855      	ldr	r0, [pc, #340]	@ (8000a24 <Clk_Init+0x23c>)
 80008ce:	f7ff fd1f 	bl	8000310 <strlen>
 80008d2:	4603      	mov	r3, r0
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	4952      	ldr	r1, [pc, #328]	@ (8000a24 <Clk_Init+0x23c>)
 80008dc:	4853      	ldr	r0, [pc, #332]	@ (8000a2c <Clk_Init+0x244>)
 80008de:	f002 f835 	bl	800294c <HAL_UART_Transmit>

	memset(msg, 0, sizeof(msg));
 80008e2:	2264      	movs	r2, #100	@ 0x64
 80008e4:	2100      	movs	r1, #0
 80008e6:	484f      	ldr	r0, [pc, #316]	@ (8000a24 <Clk_Init+0x23c>)
 80008e8:	f003 f96c 	bl	8003bc4 <memset>
	sprintf(msg, "HCLK : %ld MHz\r\n", HAL_RCC_GetHCLKFreq()/oneMHz);
 80008ec:	f001 fcae 	bl	800224c <HAL_RCC_GetHCLKFreq>
 80008f0:	4603      	mov	r3, r0
 80008f2:	4a50      	ldr	r2, [pc, #320]	@ (8000a34 <Clk_Init+0x24c>)
 80008f4:	fba2 2303 	umull	r2, r3, r2, r3
 80008f8:	0c9b      	lsrs	r3, r3, #18
 80008fa:	461a      	mov	r2, r3
 80008fc:	494f      	ldr	r1, [pc, #316]	@ (8000a3c <Clk_Init+0x254>)
 80008fe:	4849      	ldr	r0, [pc, #292]	@ (8000a24 <Clk_Init+0x23c>)
 8000900:	f003 f93e 	bl	8003b80 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000904:	4847      	ldr	r0, [pc, #284]	@ (8000a24 <Clk_Init+0x23c>)
 8000906:	f7ff fd03 	bl	8000310 <strlen>
 800090a:	4603      	mov	r3, r0
 800090c:	b29a      	uxth	r2, r3
 800090e:	f04f 33ff 	mov.w	r3, #4294967295
 8000912:	4944      	ldr	r1, [pc, #272]	@ (8000a24 <Clk_Init+0x23c>)
 8000914:	4845      	ldr	r0, [pc, #276]	@ (8000a2c <Clk_Init+0x244>)
 8000916:	f002 f819 	bl	800294c <HAL_UART_Transmit>

	memset(msg, 0, sizeof(msg));
 800091a:	2264      	movs	r2, #100	@ 0x64
 800091c:	2100      	movs	r1, #0
 800091e:	4841      	ldr	r0, [pc, #260]	@ (8000a24 <Clk_Init+0x23c>)
 8000920:	f003 f950 	bl	8003bc4 <memset>
	sprintf(msg, "PLL1 : %ld MHz\r\n", HAL_RCC_GetPCLK1Freq()/oneMHz);
 8000924:	f001 fcc2 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 8000928:	4603      	mov	r3, r0
 800092a:	4a42      	ldr	r2, [pc, #264]	@ (8000a34 <Clk_Init+0x24c>)
 800092c:	fba2 2303 	umull	r2, r3, r2, r3
 8000930:	0c9b      	lsrs	r3, r3, #18
 8000932:	461a      	mov	r2, r3
 8000934:	4942      	ldr	r1, [pc, #264]	@ (8000a40 <Clk_Init+0x258>)
 8000936:	483b      	ldr	r0, [pc, #236]	@ (8000a24 <Clk_Init+0x23c>)
 8000938:	f003 f922 	bl	8003b80 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800093c:	4839      	ldr	r0, [pc, #228]	@ (8000a24 <Clk_Init+0x23c>)
 800093e:	f7ff fce7 	bl	8000310 <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	b29a      	uxth	r2, r3
 8000946:	f04f 33ff 	mov.w	r3, #4294967295
 800094a:	4936      	ldr	r1, [pc, #216]	@ (8000a24 <Clk_Init+0x23c>)
 800094c:	4837      	ldr	r0, [pc, #220]	@ (8000a2c <Clk_Init+0x244>)
 800094e:	f001 fffd 	bl	800294c <HAL_UART_Transmit>

	memset(msg, 0, sizeof(msg));
 8000952:	2264      	movs	r2, #100	@ 0x64
 8000954:	2100      	movs	r1, #0
 8000956:	4833      	ldr	r0, [pc, #204]	@ (8000a24 <Clk_Init+0x23c>)
 8000958:	f003 f934 	bl	8003bc4 <memset>
	sprintf(msg, "D1PCLK1 : %ld MHz\r\n", HAL_RCCEx_GetD1PCLK1Freq()/oneMHz);
 800095c:	f001 fcd2 	bl	8002304 <HAL_RCCEx_GetD1PCLK1Freq>
 8000960:	4603      	mov	r3, r0
 8000962:	4a34      	ldr	r2, [pc, #208]	@ (8000a34 <Clk_Init+0x24c>)
 8000964:	fba2 2303 	umull	r2, r3, r2, r3
 8000968:	0c9b      	lsrs	r3, r3, #18
 800096a:	461a      	mov	r2, r3
 800096c:	4935      	ldr	r1, [pc, #212]	@ (8000a44 <Clk_Init+0x25c>)
 800096e:	482d      	ldr	r0, [pc, #180]	@ (8000a24 <Clk_Init+0x23c>)
 8000970:	f003 f906 	bl	8003b80 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000974:	482b      	ldr	r0, [pc, #172]	@ (8000a24 <Clk_Init+0x23c>)
 8000976:	f7ff fccb 	bl	8000310 <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	b29a      	uxth	r2, r3
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
 8000982:	4928      	ldr	r1, [pc, #160]	@ (8000a24 <Clk_Init+0x23c>)
 8000984:	4829      	ldr	r0, [pc, #164]	@ (8000a2c <Clk_Init+0x244>)
 8000986:	f001 ffe1 	bl	800294c <HAL_UART_Transmit>

	memset(msg, 0, sizeof(msg));
 800098a:	2264      	movs	r2, #100	@ 0x64
 800098c:	2100      	movs	r1, #0
 800098e:	4825      	ldr	r0, [pc, #148]	@ (8000a24 <Clk_Init+0x23c>)
 8000990:	f003 f918 	bl	8003bc4 <memset>
	sprintf(msg, "D3PCLK1 : %ld MHz\r\n", HAL_RCCEx_GetD3PCLK1Freq()/oneMHz);
 8000994:	f001 fccc 	bl	8002330 <HAL_RCCEx_GetD3PCLK1Freq>
 8000998:	4603      	mov	r3, r0
 800099a:	4a26      	ldr	r2, [pc, #152]	@ (8000a34 <Clk_Init+0x24c>)
 800099c:	fba2 2303 	umull	r2, r3, r2, r3
 80009a0:	0c9b      	lsrs	r3, r3, #18
 80009a2:	461a      	mov	r2, r3
 80009a4:	4928      	ldr	r1, [pc, #160]	@ (8000a48 <Clk_Init+0x260>)
 80009a6:	481f      	ldr	r0, [pc, #124]	@ (8000a24 <Clk_Init+0x23c>)
 80009a8:	f003 f8ea 	bl	8003b80 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80009ac:	481d      	ldr	r0, [pc, #116]	@ (8000a24 <Clk_Init+0x23c>)
 80009ae:	f7ff fcaf 	bl	8000310 <strlen>
 80009b2:	4603      	mov	r3, r0
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	491a      	ldr	r1, [pc, #104]	@ (8000a24 <Clk_Init+0x23c>)
 80009bc:	481b      	ldr	r0, [pc, #108]	@ (8000a2c <Clk_Init+0x244>)
 80009be:	f001 ffc5 	bl	800294c <HAL_UART_Transmit>

	memset(msg, 0, sizeof(msg));
 80009c2:	2264      	movs	r2, #100	@ 0x64
 80009c4:	2100      	movs	r1, #0
 80009c6:	4817      	ldr	r0, [pc, #92]	@ (8000a24 <Clk_Init+0x23c>)
 80009c8:	f003 f8fc 	bl	8003bc4 <memset>
	sprintf(msg, "main.c in execution in next line\r\n");
 80009cc:	491f      	ldr	r1, [pc, #124]	@ (8000a4c <Clk_Init+0x264>)
 80009ce:	4815      	ldr	r0, [pc, #84]	@ (8000a24 <Clk_Init+0x23c>)
 80009d0:	f003 f8d6 	bl	8003b80 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80009d4:	4813      	ldr	r0, [pc, #76]	@ (8000a24 <Clk_Init+0x23c>)
 80009d6:	f7ff fc9b 	bl	8000310 <strlen>
 80009da:	4603      	mov	r3, r0
 80009dc:	b29a      	uxth	r2, r3
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	4910      	ldr	r1, [pc, #64]	@ (8000a24 <Clk_Init+0x23c>)
 80009e4:	4811      	ldr	r0, [pc, #68]	@ (8000a2c <Clk_Init+0x244>)
 80009e6:	f001 ffb1 	bl	800294c <HAL_UART_Transmit>

	memset(msg, 0, sizeof(msg));
 80009ea:	2264      	movs	r2, #100	@ 0x64
 80009ec:	2100      	movs	r1, #0
 80009ee:	480d      	ldr	r0, [pc, #52]	@ (8000a24 <Clk_Init+0x23c>)
 80009f0:	f003 f8e8 	bl	8003bc4 <memset>
	sprintf(msg, "-----------------------------------\r\n");
 80009f4:	490c      	ldr	r1, [pc, #48]	@ (8000a28 <Clk_Init+0x240>)
 80009f6:	480b      	ldr	r0, [pc, #44]	@ (8000a24 <Clk_Init+0x23c>)
 80009f8:	f003 f8c2 	bl	8003b80 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80009fc:	4809      	ldr	r0, [pc, #36]	@ (8000a24 <Clk_Init+0x23c>)
 80009fe:	f7ff fc87 	bl	8000310 <strlen>
 8000a02:	4603      	mov	r3, r0
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0a:	4906      	ldr	r1, [pc, #24]	@ (8000a24 <Clk_Init+0x23c>)
 8000a0c:	4807      	ldr	r0, [pc, #28]	@ (8000a2c <Clk_Init+0x244>)
 8000a0e:	f001 ff9d 	bl	800294c <HAL_UART_Transmit>
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2400015c 	.word	0x2400015c
 8000a1c:	58024400 	.word	0x58024400
 8000a20:	10624dd3 	.word	0x10624dd3
 8000a24:	2400017c 	.word	0x2400017c
 8000a28:	080044d8 	.word	0x080044d8
 8000a2c:	2400007c 	.word	0x2400007c
 8000a30:	08004500 	.word	0x08004500
 8000a34:	431bde83 	.word	0x431bde83
 8000a38:	08004528 	.word	0x08004528
 8000a3c:	0800453c 	.word	0x0800453c
 8000a40:	08004550 	.word	0x08004550
 8000a44:	08004564 	.word	0x08004564
 8000a48:	08004578 	.word	0x08004578
 8000a4c:	0800458c 	.word	0x0800458c

08000a50 <HAL_MspInit>:
#include "main.h"

void HAL_MspInit(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	//1. Setup the priority grouping of the M7 Cortex

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 fadd 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>

	//2.Enable the required system exceptions

	SCB->SHCSR |= 0x7 << 16;
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a90 <HAL_MspInit+0x40>)
 8000a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000a90 <HAL_MspInit+0x40>)
 8000a60:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000a64:	6253      	str	r3, [r2, #36]	@ 0x24

	//3. Configure the priority for the system Application

	HAL_NVIC_SetPriority( MemoryManagement_IRQn,0, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2100      	movs	r1, #0
 8000a6a:	f06f 000b 	mvn.w	r0, #11
 8000a6e:	f000 fadc 	bl	800102a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority( BusFault_IRQn,0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	f06f 000a 	mvn.w	r0, #10
 8000a7a:	f000 fad6 	bl	800102a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority( UsageFault_IRQn,0, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	f06f 0009 	mvn.w	r0, #9
 8000a86:	f000 fad0 	bl	800102a <HAL_NVIC_SetPriority>

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <HAL_UART_MspInit>:

 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	@ 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef GPIO_UART = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
	 //Low level initialization of the USART1

	 //1. Enable the clock for the peripheral
	 __HAL_RCC_USART1_CLK_ENABLE();
 8000aac:	4b21      	ldr	r3, [pc, #132]	@ (8000b34 <HAL_UART_MspInit+0xa0>)
 8000aae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ab2:	4a20      	ldr	r2, [pc, #128]	@ (8000b34 <HAL_UART_MspInit+0xa0>)
 8000ab4:	f043 0310 	orr.w	r3, r3, #16
 8000ab8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000abc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b34 <HAL_UART_MspInit+0xa0>)
 8000abe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ac2:	f003 0310 	and.w	r3, r3, #16
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <HAL_UART_MspInit+0xa0>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad0:	4a18      	ldr	r2, [pc, #96]	@ (8000b34 <HAL_UART_MspInit+0xa0>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ada:	4b16      	ldr	r3, [pc, #88]	@ (8000b34 <HAL_UART_MspInit+0xa0>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
	 //2. Do pin muxing configuration
	 GPIO_UART.Pin = GPIO_PIN_9; //PA9 -> TX
 8000ae8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aec:	617b      	str	r3, [r7, #20]
	 GPIO_UART.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
	 GPIO_UART.Pull = GPIO_PULLUP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	61fb      	str	r3, [r7, #28]
	 GPIO_UART.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
	 GPIO_UART.Alternate = GPIO_AF7_USART1;
 8000afa:	2307      	movs	r3, #7
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
	 HAL_GPIO_Init(GPIOA, &GPIO_UART);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	480c      	ldr	r0, [pc, #48]	@ (8000b38 <HAL_UART_MspInit+0xa4>)
 8000b06:	f000 faef 	bl	80010e8 <HAL_GPIO_Init>

	 GPIO_UART.Pin = GPIO_PIN_10;
 8000b0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b0e:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA, &GPIO_UART);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	4808      	ldr	r0, [pc, #32]	@ (8000b38 <HAL_UART_MspInit+0xa4>)
 8000b18:	f000 fae6 	bl	80010e8 <HAL_GPIO_Init>

	 //3. Enable the IRQ and set up the priority (NVIC Settings)
	 HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b1c:	2025      	movs	r0, #37	@ 0x25
 8000b1e:	f000 fa9e 	bl	800105e <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	210f      	movs	r1, #15
 8000b26:	2025      	movs	r0, #37	@ 0x25
 8000b28:	f000 fa7f 	bl	800102a <HAL_NVIC_SetPriority>

}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	@ 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	58024400 	.word	0x58024400
 8000b38:	58020000 	.word	0x58020000

08000b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b44:	4a14      	ldr	r2, [pc, #80]	@ (8000b98 <_sbrk+0x5c>)
 8000b46:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <_sbrk+0x60>)
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b50:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b58:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <_sbrk+0x64>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ba4 <_sbrk+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d207      	bcs.n	8000b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b6c:	f003 f832 	bl	8003bd4 <__errno>
 8000b70:	4603      	mov	r3, r0
 8000b72:	220c      	movs	r2, #12
 8000b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	e009      	b.n	8000b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b82:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ba0 <_sbrk+0x64>)
 8000b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	24050000 	.word	0x24050000
 8000b9c:	00000400 	.word	0x00000400
 8000ba0:	240001e0 	.word	0x240001e0
 8000ba4:	24000330 	.word	0x24000330

08000ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bac:	4b3e      	ldr	r3, [pc, #248]	@ (8000ca8 <SystemInit+0x100>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bb2:	4a3d      	ldr	r2, [pc, #244]	@ (8000ca8 <SystemInit+0x100>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8000cac <SystemInit+0x104>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f003 030f 	and.w	r3, r3, #15
 8000bc4:	2b06      	cmp	r3, #6
 8000bc6:	d807      	bhi.n	8000bd8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc8:	4b38      	ldr	r3, [pc, #224]	@ (8000cac <SystemInit+0x104>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f023 030f 	bic.w	r3, r3, #15
 8000bd0:	4a36      	ldr	r2, [pc, #216]	@ (8000cac <SystemInit+0x104>)
 8000bd2:	f043 0307 	orr.w	r3, r3, #7
 8000bd6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bd8:	4b35      	ldr	r3, [pc, #212]	@ (8000cb0 <SystemInit+0x108>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a34      	ldr	r2, [pc, #208]	@ (8000cb0 <SystemInit+0x108>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000be4:	4b32      	ldr	r3, [pc, #200]	@ (8000cb0 <SystemInit+0x108>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bea:	4b31      	ldr	r3, [pc, #196]	@ (8000cb0 <SystemInit+0x108>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4930      	ldr	r1, [pc, #192]	@ (8000cb0 <SystemInit+0x108>)
 8000bf0:	4b30      	ldr	r3, [pc, #192]	@ (8000cb4 <SystemInit+0x10c>)
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8000cac <SystemInit+0x104>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0308 	and.w	r3, r3, #8
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d007      	beq.n	8000c12 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c02:	4b2a      	ldr	r3, [pc, #168]	@ (8000cac <SystemInit+0x104>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f023 030f 	bic.w	r3, r3, #15
 8000c0a:	4a28      	ldr	r2, [pc, #160]	@ (8000cac <SystemInit+0x104>)
 8000c0c:	f043 0307 	orr.w	r3, r3, #7
 8000c10:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c12:	4b27      	ldr	r3, [pc, #156]	@ (8000cb0 <SystemInit+0x108>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c18:	4b25      	ldr	r3, [pc, #148]	@ (8000cb0 <SystemInit+0x108>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c1e:	4b24      	ldr	r3, [pc, #144]	@ (8000cb0 <SystemInit+0x108>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c24:	4b22      	ldr	r3, [pc, #136]	@ (8000cb0 <SystemInit+0x108>)
 8000c26:	4a24      	ldr	r2, [pc, #144]	@ (8000cb8 <SystemInit+0x110>)
 8000c28:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c2a:	4b21      	ldr	r3, [pc, #132]	@ (8000cb0 <SystemInit+0x108>)
 8000c2c:	4a23      	ldr	r2, [pc, #140]	@ (8000cbc <SystemInit+0x114>)
 8000c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c30:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb0 <SystemInit+0x108>)
 8000c32:	4a23      	ldr	r2, [pc, #140]	@ (8000cc0 <SystemInit+0x118>)
 8000c34:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c36:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb0 <SystemInit+0x108>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb0 <SystemInit+0x108>)
 8000c3e:	4a20      	ldr	r2, [pc, #128]	@ (8000cc0 <SystemInit+0x118>)
 8000c40:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c42:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <SystemInit+0x108>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c48:	4b19      	ldr	r3, [pc, #100]	@ (8000cb0 <SystemInit+0x108>)
 8000c4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000cc0 <SystemInit+0x118>)
 8000c4c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c4e:	4b18      	ldr	r3, [pc, #96]	@ (8000cb0 <SystemInit+0x108>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c54:	4b16      	ldr	r3, [pc, #88]	@ (8000cb0 <SystemInit+0x108>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a15      	ldr	r2, [pc, #84]	@ (8000cb0 <SystemInit+0x108>)
 8000c5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c60:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <SystemInit+0x108>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000c66:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <SystemInit+0x108>)
 8000c68:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d113      	bne.n	8000c9c <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c74:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <SystemInit+0x108>)
 8000c76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c7a:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb0 <SystemInit+0x108>)
 8000c7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c80:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <SystemInit+0x11c>)
 8000c86:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c8a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c8c:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <SystemInit+0x108>)
 8000c8e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c92:	4a07      	ldr	r2, [pc, #28]	@ (8000cb0 <SystemInit+0x108>)
 8000c94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c98:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00
 8000cac:	52002000 	.word	0x52002000
 8000cb0:	58024400 	.word	0x58024400
 8000cb4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cb8:	02020200 	.word	0x02020200
 8000cbc:	01ff0000 	.word	0x01ff0000
 8000cc0:	01010280 	.word	0x01010280
 8000cc4:	52004000 	.word	0x52004000

08000cc8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	@ (8000cf4 <ExitRun0Mode+0x2c>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	4a08      	ldr	r2, [pc, #32]	@ (8000cf4 <ExitRun0Mode+0x2c>)
 8000cd2:	f043 0302 	orr.w	r3, r3, #2
 8000cd6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000cd8:	bf00      	nop
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <ExitRun0Mode+0x2c>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0f9      	beq.n	8000cda <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000ce6:	bf00      	nop
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	58024800 	.word	0x58024800

08000cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000cf8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000d34 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000cfc:	f7ff ffe4 	bl	8000cc8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d00:	f7ff ff52 	bl	8000ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d04:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d06:	490d      	ldr	r1, [pc, #52]	@ (8000d3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d08:	4a0d      	ldr	r2, [pc, #52]	@ (8000d40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f002 ff59 	bl	8003be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2e:	f7ff fce5 	bl	80006fc <main>
  bx  lr
 8000d32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d34:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000d38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d3c:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8000d40:	0800461c 	.word	0x0800461c
  ldr r2, =_sbss
 8000d44:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8000d48:	24000330 	.word	0x24000330

08000d4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC3_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d56:	2003      	movs	r0, #3
 8000d58:	f000 f95c 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d5c:	f001 f8fc 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8000d60:	4602      	mov	r2, r0
 8000d62:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <HAL_Init+0x68>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	0a1b      	lsrs	r3, r3, #8
 8000d68:	f003 030f 	and.w	r3, r3, #15
 8000d6c:	4913      	ldr	r1, [pc, #76]	@ (8000dbc <HAL_Init+0x6c>)
 8000d6e:	5ccb      	ldrb	r3, [r1, r3]
 8000d70:	f003 031f 	and.w	r3, r3, #31
 8000d74:	fa22 f303 	lsr.w	r3, r2, r3
 8000d78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <HAL_Init+0x68>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	4a0e      	ldr	r2, [pc, #56]	@ (8000dbc <HAL_Init+0x6c>)
 8000d84:	5cd3      	ldrb	r3, [r2, r3]
 8000d86:	f003 031f 	and.w	r3, r3, #31
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d90:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc0 <HAL_Init+0x70>)
 8000d92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d94:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc4 <HAL_Init+0x74>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d9a:	200f      	movs	r0, #15
 8000d9c:	f000 f814 	bl	8000dc8 <HAL_InitTick>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e002      	b.n	8000db0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000daa:	f7ff fe51 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	58024400 	.word	0x58024400
 8000dbc:	080045b0 	.word	0x080045b0
 8000dc0:	24000004 	.word	0x24000004
 8000dc4:	24000000 	.word	0x24000000

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000dd0:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <HAL_InitTick+0x60>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e021      	b.n	8000e20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <HAL_InitTick+0x64>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <HAL_InitTick+0x60>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f941 	bl	800107a <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 f90b 	bl	800102a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	@ (8000e30 <HAL_InitTick+0x68>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	2400000c 	.word	0x2400000c
 8000e2c:	24000000 	.word	0x24000000
 8000e30:	24000008 	.word	0x24000008

08000e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <HAL_IncTick+0x20>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_IncTick+0x24>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <HAL_IncTick+0x24>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	2400000c 	.word	0x2400000c
 8000e58:	240001e4 	.word	0x240001e4

08000e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b03      	ldr	r3, [pc, #12]	@ (8000e70 <HAL_GetTick+0x14>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	240001e4 	.word	0x240001e4

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	@ (8000eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00
 8000eb8:	05fa0000 	.word	0x05fa0000

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	@ (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ee2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db0b      	blt.n	8000f02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	f003 021f 	and.w	r2, r3, #31
 8000ef0:	4907      	ldr	r1, [pc, #28]	@ (8000f10 <__NVIC_EnableIRQ+0x38>)
 8000ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ef6:	095b      	lsrs	r3, r3, #5
 8000ef8:	2001      	movs	r0, #1
 8000efa:	fa00 f202 	lsl.w	r2, r0, r2
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	@ (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	@ (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	@ 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	@ 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fe0:	d301      	bcc.n	8000fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00f      	b.n	8001006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8001010 <SysTick_Config+0x40>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fee:	210f      	movs	r1, #15
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f7ff ff8e 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <SysTick_Config+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	@ (8001010 <SysTick_Config+0x40>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff29 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff40 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff90 	bl	8000f68 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5f 	bl	8000f14 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff33 	bl	8000ed8 <__NVIC_EnableIRQ>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffa4 	bl	8000fd0 <SysTick_Config>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b04      	cmp	r3, #4
 80010a0:	d106      	bne.n	80010b0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80010a2:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a08      	ldr	r2, [pc, #32]	@ (80010c8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80010ae:	e005      	b.n	80010bc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a04      	ldr	r2, [pc, #16]	@ (80010c8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80010b6:	f023 0304 	bic.w	r3, r3, #4
 80010ba:	6013      	str	r3, [r2, #0]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80010d0:	f000 f802 	bl	80010d8 <HAL_SYSTICK_Callback>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	@ 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80010f6:	4b86      	ldr	r3, [pc, #536]	@ (8001310 <HAL_GPIO_Init+0x228>)
 80010f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010fa:	e18c      	b.n	8001416 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	2101      	movs	r1, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 817e 	beq.w	8001410 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b01      	cmp	r3, #1
 800111e:	d005      	beq.n	800112c <HAL_GPIO_Init+0x44>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d130      	bne.n	800118e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68da      	ldr	r2, [r3, #12]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001162:	2201      	movs	r2, #1
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	091b      	lsrs	r3, r3, #4
 8001178:	f003 0201 	and.w	r2, r3, #1
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	2b03      	cmp	r3, #3
 8001198:	d017      	beq.n	80011ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	2203      	movs	r2, #3
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d123      	bne.n	800121e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	08da      	lsrs	r2, r3, #3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3208      	adds	r2, #8
 80011de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	220f      	movs	r2, #15
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	691a      	ldr	r2, [r3, #16]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	08da      	lsrs	r2, r3, #3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3208      	adds	r2, #8
 8001218:	69b9      	ldr	r1, [r7, #24]
 800121a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	2203      	movs	r2, #3
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 0203 	and.w	r2, r3, #3
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 80d8 	beq.w	8001410 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001260:	4b2c      	ldr	r3, [pc, #176]	@ (8001314 <HAL_GPIO_Init+0x22c>)
 8001262:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001266:	4a2b      	ldr	r2, [pc, #172]	@ (8001314 <HAL_GPIO_Init+0x22c>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001270:	4b28      	ldr	r3, [pc, #160]	@ (8001314 <HAL_GPIO_Init+0x22c>)
 8001272:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800127e:	4a26      	ldr	r2, [pc, #152]	@ (8001318 <HAL_GPIO_Init+0x230>)
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	3302      	adds	r3, #2
 8001286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	220f      	movs	r2, #15
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a1d      	ldr	r2, [pc, #116]	@ (800131c <HAL_GPIO_Init+0x234>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d04a      	beq.n	8001340 <HAL_GPIO_Init+0x258>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001320 <HAL_GPIO_Init+0x238>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d02b      	beq.n	800130a <HAL_GPIO_Init+0x222>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001324 <HAL_GPIO_Init+0x23c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d025      	beq.n	8001306 <HAL_GPIO_Init+0x21e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001328 <HAL_GPIO_Init+0x240>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d01f      	beq.n	8001302 <HAL_GPIO_Init+0x21a>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a19      	ldr	r2, [pc, #100]	@ (800132c <HAL_GPIO_Init+0x244>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d019      	beq.n	80012fe <HAL_GPIO_Init+0x216>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a18      	ldr	r2, [pc, #96]	@ (8001330 <HAL_GPIO_Init+0x248>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d013      	beq.n	80012fa <HAL_GPIO_Init+0x212>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a17      	ldr	r2, [pc, #92]	@ (8001334 <HAL_GPIO_Init+0x24c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d00d      	beq.n	80012f6 <HAL_GPIO_Init+0x20e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a16      	ldr	r2, [pc, #88]	@ (8001338 <HAL_GPIO_Init+0x250>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d007      	beq.n	80012f2 <HAL_GPIO_Init+0x20a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a15      	ldr	r2, [pc, #84]	@ (800133c <HAL_GPIO_Init+0x254>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d101      	bne.n	80012ee <HAL_GPIO_Init+0x206>
 80012ea:	2309      	movs	r3, #9
 80012ec:	e029      	b.n	8001342 <HAL_GPIO_Init+0x25a>
 80012ee:	230a      	movs	r3, #10
 80012f0:	e027      	b.n	8001342 <HAL_GPIO_Init+0x25a>
 80012f2:	2307      	movs	r3, #7
 80012f4:	e025      	b.n	8001342 <HAL_GPIO_Init+0x25a>
 80012f6:	2306      	movs	r3, #6
 80012f8:	e023      	b.n	8001342 <HAL_GPIO_Init+0x25a>
 80012fa:	2305      	movs	r3, #5
 80012fc:	e021      	b.n	8001342 <HAL_GPIO_Init+0x25a>
 80012fe:	2304      	movs	r3, #4
 8001300:	e01f      	b.n	8001342 <HAL_GPIO_Init+0x25a>
 8001302:	2303      	movs	r3, #3
 8001304:	e01d      	b.n	8001342 <HAL_GPIO_Init+0x25a>
 8001306:	2302      	movs	r3, #2
 8001308:	e01b      	b.n	8001342 <HAL_GPIO_Init+0x25a>
 800130a:	2301      	movs	r3, #1
 800130c:	e019      	b.n	8001342 <HAL_GPIO_Init+0x25a>
 800130e:	bf00      	nop
 8001310:	58000080 	.word	0x58000080
 8001314:	58024400 	.word	0x58024400
 8001318:	58000400 	.word	0x58000400
 800131c:	58020000 	.word	0x58020000
 8001320:	58020400 	.word	0x58020400
 8001324:	58020800 	.word	0x58020800
 8001328:	58020c00 	.word	0x58020c00
 800132c:	58021000 	.word	0x58021000
 8001330:	58021400 	.word	0x58021400
 8001334:	58021800 	.word	0x58021800
 8001338:	58021c00 	.word	0x58021c00
 800133c:	58022400 	.word	0x58022400
 8001340:	2300      	movs	r3, #0
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	f002 0203 	and.w	r2, r2, #3
 8001348:	0092      	lsls	r2, r2, #2
 800134a:	4093      	lsls	r3, r2
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001352:	4938      	ldr	r1, [pc, #224]	@ (8001434 <HAL_GPIO_Init+0x34c>)
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	3302      	adds	r3, #2
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001386:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800138e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80013b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	3301      	adds	r3, #1
 8001414:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa22 f303 	lsr.w	r3, r2, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	f47f ae6b 	bne.w	80010fc <HAL_GPIO_Init+0x14>
  }
}
 8001426:	bf00      	nop
 8001428:	bf00      	nop
 800142a:	3724      	adds	r7, #36	@ 0x24
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	58000400 	.word	0x58000400

08001438 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08c      	sub	sp, #48	@ 0x30
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e3c8      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 8087 	beq.w	8001566 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001458:	4b88      	ldr	r3, [pc, #544]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001460:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001462:	4b86      	ldr	r3, [pc, #536]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 8001464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001466:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800146a:	2b10      	cmp	r3, #16
 800146c:	d007      	beq.n	800147e <HAL_RCC_OscConfig+0x46>
 800146e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001470:	2b18      	cmp	r3, #24
 8001472:	d110      	bne.n	8001496 <HAL_RCC_OscConfig+0x5e>
 8001474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d10b      	bne.n	8001496 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147e:	4b7f      	ldr	r3, [pc, #508]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d06c      	beq.n	8001564 <HAL_RCC_OscConfig+0x12c>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d168      	bne.n	8001564 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e3a2      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800149e:	d106      	bne.n	80014ae <HAL_RCC_OscConfig+0x76>
 80014a0:	4b76      	ldr	r3, [pc, #472]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a75      	ldr	r2, [pc, #468]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 80014a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	e02e      	b.n	800150c <HAL_RCC_OscConfig+0xd4>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x98>
 80014b6:	4b71      	ldr	r3, [pc, #452]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a70      	ldr	r2, [pc, #448]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 80014bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b6e      	ldr	r3, [pc, #440]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a6d      	ldr	r2, [pc, #436]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 80014c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e01d      	b.n	800150c <HAL_RCC_OscConfig+0xd4>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014d8:	d10c      	bne.n	80014f4 <HAL_RCC_OscConfig+0xbc>
 80014da:	4b68      	ldr	r3, [pc, #416]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a67      	ldr	r2, [pc, #412]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 80014e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	4b65      	ldr	r3, [pc, #404]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a64      	ldr	r2, [pc, #400]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 80014ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e00b      	b.n	800150c <HAL_RCC_OscConfig+0xd4>
 80014f4:	4b61      	ldr	r3, [pc, #388]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a60      	ldr	r2, [pc, #384]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 80014fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b5e      	ldr	r3, [pc, #376]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a5d      	ldr	r2, [pc, #372]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 8001506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800150a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d013      	beq.n	800153c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001514:	f7ff fca2 	bl	8000e5c <HAL_GetTick>
 8001518:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fc9e 	bl	8000e5c <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	@ 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e356      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800152e:	4b53      	ldr	r3, [pc, #332]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0xe4>
 800153a:	e014      	b.n	8001566 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fc8e 	bl	8000e5c <HAL_GetTick>
 8001540:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fc8a 	bl	8000e5c <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	@ 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e342      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001556:	4b49      	ldr	r3, [pc, #292]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x10c>
 8001562:	e000      	b.n	8001566 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 808c 	beq.w	800168c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001574:	4b41      	ldr	r3, [pc, #260]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800157c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800157e:	4b3f      	ldr	r3, [pc, #252]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 8001580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001582:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001584:	6a3b      	ldr	r3, [r7, #32]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d007      	beq.n	800159a <HAL_RCC_OscConfig+0x162>
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	2b18      	cmp	r3, #24
 800158e:	d137      	bne.n	8001600 <HAL_RCC_OscConfig+0x1c8>
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d132      	bne.n	8001600 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800159a:	4b38      	ldr	r3, [pc, #224]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d005      	beq.n	80015b2 <HAL_RCC_OscConfig+0x17a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e314      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015b2:	4b32      	ldr	r3, [pc, #200]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 0219 	bic.w	r2, r3, #25
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	492f      	ldr	r1, [pc, #188]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c4:	f7ff fc4a 	bl	8000e5c <HAL_GetTick>
 80015c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015cc:	f7ff fc46 	bl	8000e5c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e2fe      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015de:	4b27      	ldr	r3, [pc, #156]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f0      	beq.n	80015cc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ea:	4b24      	ldr	r3, [pc, #144]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	061b      	lsls	r3, r3, #24
 80015f8:	4920      	ldr	r1, [pc, #128]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015fe:	e045      	b.n	800168c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d026      	beq.n	8001656 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001608:	4b1c      	ldr	r3, [pc, #112]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f023 0219 	bic.w	r2, r3, #25
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4919      	ldr	r1, [pc, #100]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161a:	f7ff fc1f 	bl	8000e5c <HAL_GetTick>
 800161e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001622:	f7ff fc1b 	bl	8000e5c <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e2d3      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001634:	4b11      	ldr	r3, [pc, #68]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001640:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	061b      	lsls	r3, r3, #24
 800164e:	490b      	ldr	r1, [pc, #44]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
 8001654:	e01a      	b.n	800168c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001656:	4b09      	ldr	r3, [pc, #36]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a08      	ldr	r2, [pc, #32]	@ (800167c <HAL_RCC_OscConfig+0x244>)
 800165c:	f023 0301 	bic.w	r3, r3, #1
 8001660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001662:	f7ff fbfb 	bl	8000e5c <HAL_GetTick>
 8001666:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001668:	e00a      	b.n	8001680 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166a:	f7ff fbf7 	bl	8000e5c <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d903      	bls.n	8001680 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e2af      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
 800167c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001680:	4b96      	ldr	r3, [pc, #600]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1ee      	bne.n	800166a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	2b00      	cmp	r3, #0
 8001696:	d06a      	beq.n	800176e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001698:	4b90      	ldr	r3, [pc, #576]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016a0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016a2:	4b8e      	ldr	r3, [pc, #568]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 80016a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	d007      	beq.n	80016be <HAL_RCC_OscConfig+0x286>
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	2b18      	cmp	r3, #24
 80016b2:	d11b      	bne.n	80016ec <HAL_RCC_OscConfig+0x2b4>
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d116      	bne.n	80016ec <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016be:	4b87      	ldr	r3, [pc, #540]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <HAL_RCC_OscConfig+0x29e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	2b80      	cmp	r3, #128	@ 0x80
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e282      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016d6:	4b81      	ldr	r3, [pc, #516]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	061b      	lsls	r3, r3, #24
 80016e4:	497d      	ldr	r1, [pc, #500]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016ea:	e040      	b.n	800176e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d023      	beq.n	800173c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80016f4:	4b79      	ldr	r3, [pc, #484]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a78      	ldr	r2, [pc, #480]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 80016fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff fbac 	bl	8000e5c <HAL_GetTick>
 8001704:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001708:	f7ff fba8 	bl	8000e5c <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e260      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800171a:	4b70      	ldr	r3, [pc, #448]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001726:	4b6d      	ldr	r3, [pc, #436]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	061b      	lsls	r3, r3, #24
 8001734:	4969      	ldr	r1, [pc, #420]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 8001736:	4313      	orrs	r3, r2
 8001738:	60cb      	str	r3, [r1, #12]
 800173a:	e018      	b.n	800176e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800173c:	4b67      	ldr	r3, [pc, #412]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a66      	ldr	r2, [pc, #408]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 8001742:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001748:	f7ff fb88 	bl	8000e5c <HAL_GetTick>
 800174c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001750:	f7ff fb84 	bl	8000e5c <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e23c      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001762:	4b5e      	ldr	r3, [pc, #376]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d036      	beq.n	80017e8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d019      	beq.n	80017b6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001782:	4b56      	ldr	r3, [pc, #344]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 8001784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001786:	4a55      	ldr	r2, [pc, #340]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178e:	f7ff fb65 	bl	8000e5c <HAL_GetTick>
 8001792:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001796:	f7ff fb61 	bl	8000e5c <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e219      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017a8:	4b4c      	ldr	r3, [pc, #304]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 80017aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f0      	beq.n	8001796 <HAL_RCC_OscConfig+0x35e>
 80017b4:	e018      	b.n	80017e8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b6:	4b49      	ldr	r3, [pc, #292]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 80017b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017ba:	4a48      	ldr	r2, [pc, #288]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c2:	f7ff fb4b 	bl	8000e5c <HAL_GetTick>
 80017c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ca:	f7ff fb47 	bl	8000e5c <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e1ff      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017dc:	4b3f      	ldr	r3, [pc, #252]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 80017de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f0      	bne.n	80017ca <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0320 	and.w	r3, r3, #32
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d036      	beq.n	8001862 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d019      	beq.n	8001830 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017fc:	4b37      	ldr	r3, [pc, #220]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a36      	ldr	r2, [pc, #216]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 8001802:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001806:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001808:	f7ff fb28 	bl	8000e5c <HAL_GetTick>
 800180c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001810:	f7ff fb24 	bl	8000e5c <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e1dc      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001822:	4b2e      	ldr	r3, [pc, #184]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f0      	beq.n	8001810 <HAL_RCC_OscConfig+0x3d8>
 800182e:	e018      	b.n	8001862 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001830:	4b2a      	ldr	r3, [pc, #168]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a29      	ldr	r2, [pc, #164]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 8001836:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800183a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800183c:	f7ff fb0e 	bl	8000e5c <HAL_GetTick>
 8001840:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001844:	f7ff fb0a 	bl	8000e5c <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e1c2      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001856:	4b21      	ldr	r3, [pc, #132]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 8086 	beq.w	800197c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001870:	4b1b      	ldr	r3, [pc, #108]	@ (80018e0 <HAL_RCC_OscConfig+0x4a8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a1a      	ldr	r2, [pc, #104]	@ (80018e0 <HAL_RCC_OscConfig+0x4a8>)
 8001876:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800187a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800187c:	f7ff faee 	bl	8000e5c <HAL_GetTick>
 8001880:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001884:	f7ff faea 	bl	8000e5c <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	@ 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e1a2      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001896:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <HAL_RCC_OscConfig+0x4a8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d106      	bne.n	80018b8 <HAL_RCC_OscConfig+0x480>
 80018aa:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ae:	4a0b      	ldr	r2, [pc, #44]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80018b6:	e032      	b.n	800191e <HAL_RCC_OscConfig+0x4e6>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d111      	bne.n	80018e4 <HAL_RCC_OscConfig+0x4ac>
 80018c0:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 80018c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018c4:	4a05      	ldr	r2, [pc, #20]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80018cc:	4b03      	ldr	r3, [pc, #12]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 80018ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d0:	4a02      	ldr	r2, [pc, #8]	@ (80018dc <HAL_RCC_OscConfig+0x4a4>)
 80018d2:	f023 0304 	bic.w	r3, r3, #4
 80018d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d8:	e021      	b.n	800191e <HAL_RCC_OscConfig+0x4e6>
 80018da:	bf00      	nop
 80018dc:	58024400 	.word	0x58024400
 80018e0:	58024800 	.word	0x58024800
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	d10c      	bne.n	8001906 <HAL_RCC_OscConfig+0x4ce>
 80018ec:	4b83      	ldr	r3, [pc, #524]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f0:	4a82      	ldr	r2, [pc, #520]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 80018f2:	f043 0304 	orr.w	r3, r3, #4
 80018f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f8:	4b80      	ldr	r3, [pc, #512]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018fc:	4a7f      	ldr	r2, [pc, #508]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6713      	str	r3, [r2, #112]	@ 0x70
 8001904:	e00b      	b.n	800191e <HAL_RCC_OscConfig+0x4e6>
 8001906:	4b7d      	ldr	r3, [pc, #500]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800190a:	4a7c      	ldr	r2, [pc, #496]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 800190c:	f023 0301 	bic.w	r3, r3, #1
 8001910:	6713      	str	r3, [r2, #112]	@ 0x70
 8001912:	4b7a      	ldr	r3, [pc, #488]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001916:	4a79      	ldr	r2, [pc, #484]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001918:	f023 0304 	bic.w	r3, r3, #4
 800191c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d015      	beq.n	8001952 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001926:	f7ff fa99 	bl	8000e5c <HAL_GetTick>
 800192a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800192c:	e00a      	b.n	8001944 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7ff fa95 	bl	8000e5c <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800193c:	4293      	cmp	r3, r2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e14b      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001944:	4b6d      	ldr	r3, [pc, #436]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0ee      	beq.n	800192e <HAL_RCC_OscConfig+0x4f6>
 8001950:	e014      	b.n	800197c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001952:	f7ff fa83 	bl	8000e5c <HAL_GetTick>
 8001956:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001958:	e00a      	b.n	8001970 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195a:	f7ff fa7f 	bl	8000e5c <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001968:	4293      	cmp	r3, r2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e135      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001970:	4b62      	ldr	r3, [pc, #392]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1ee      	bne.n	800195a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 812a 	beq.w	8001bda <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001986:	4b5d      	ldr	r3, [pc, #372]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800198e:	2b18      	cmp	r3, #24
 8001990:	f000 80ba 	beq.w	8001b08 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001998:	2b02      	cmp	r3, #2
 800199a:	f040 8095 	bne.w	8001ac8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199e:	4b57      	ldr	r3, [pc, #348]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a56      	ldr	r2, [pc, #344]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 80019a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019aa:	f7ff fa57 	bl	8000e5c <HAL_GetTick>
 80019ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b2:	f7ff fa53 	bl	8000e5c <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e10b      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019c4:	4b4d      	ldr	r3, [pc, #308]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f0      	bne.n	80019b2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d0:	4b4a      	ldr	r3, [pc, #296]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 80019d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001b00 <HAL_RCC_OscConfig+0x6c8>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80019e0:	0112      	lsls	r2, r2, #4
 80019e2:	430a      	orrs	r2, r1
 80019e4:	4945      	ldr	r1, [pc, #276]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	628b      	str	r3, [r1, #40]	@ 0x28
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	3b01      	subs	r3, #1
 80019f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f8:	3b01      	subs	r3, #1
 80019fa:	025b      	lsls	r3, r3, #9
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a04:	3b01      	subs	r3, #1
 8001a06:	041b      	lsls	r3, r3, #16
 8001a08:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a12:	3b01      	subs	r3, #1
 8001a14:	061b      	lsls	r3, r3, #24
 8001a16:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001a1a:	4938      	ldr	r1, [pc, #224]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001a20:	4b36      	ldr	r3, [pc, #216]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a24:	4a35      	ldr	r2, [pc, #212]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001a26:	f023 0301 	bic.w	r3, r3, #1
 8001a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a2c:	4b33      	ldr	r3, [pc, #204]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001a2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a30:	4b34      	ldr	r3, [pc, #208]	@ (8001b04 <HAL_RCC_OscConfig+0x6cc>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a38:	00d2      	lsls	r2, r2, #3
 8001a3a:	4930      	ldr	r1, [pc, #192]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a40:	4b2e      	ldr	r3, [pc, #184]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a44:	f023 020c 	bic.w	r2, r3, #12
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4c:	492b      	ldr	r1, [pc, #172]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a52:	4b2a      	ldr	r3, [pc, #168]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a56:	f023 0202 	bic.w	r2, r3, #2
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5e:	4927      	ldr	r1, [pc, #156]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a64:	4b25      	ldr	r3, [pc, #148]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a68:	4a24      	ldr	r2, [pc, #144]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001a6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a70:	4b22      	ldr	r3, [pc, #136]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a74:	4a21      	ldr	r2, [pc, #132]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a80:	4a1e      	ldr	r2, [pc, #120]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001a82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001a88:	4b1c      	ldr	r3, [pc, #112]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a94:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a18      	ldr	r2, [pc, #96]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001a9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f9dc 	bl	8000e5c <HAL_GetTick>
 8001aa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff f9d8 	bl	8000e5c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e090      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001aba:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x670>
 8001ac6:	e088      	b.n	8001bda <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0b      	ldr	r2, [pc, #44]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001ace:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7ff f9c2 	bl	8000e5c <HAL_GetTick>
 8001ad8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff f9be 	bl	8000e5c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e076      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001aee:	4b03      	ldr	r3, [pc, #12]	@ (8001afc <HAL_RCC_OscConfig+0x6c4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a4>
 8001afa:	e06e      	b.n	8001bda <HAL_RCC_OscConfig+0x7a2>
 8001afc:	58024400 	.word	0x58024400
 8001b00:	fffffc0c 	.word	0xfffffc0c
 8001b04:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b08:	4b36      	ldr	r3, [pc, #216]	@ (8001be4 <HAL_RCC_OscConfig+0x7ac>)
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b0e:	4b35      	ldr	r3, [pc, #212]	@ (8001be4 <HAL_RCC_OscConfig+0x7ac>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d031      	beq.n	8001b80 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	f003 0203 	and.w	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d12a      	bne.n	8001b80 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d122      	bne.n	8001b80 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b44:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d11a      	bne.n	8001b80 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	0a5b      	lsrs	r3, r3, #9
 8001b4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b56:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d111      	bne.n	8001b80 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	0c1b      	lsrs	r3, r3, #16
 8001b60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d108      	bne.n	8001b80 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	0e1b      	lsrs	r3, r3, #24
 8001b72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b7a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e02b      	b.n	8001bdc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001b84:	4b17      	ldr	r3, [pc, #92]	@ (8001be4 <HAL_RCC_OscConfig+0x7ac>)
 8001b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b88:	08db      	lsrs	r3, r3, #3
 8001b8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001b8e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d01f      	beq.n	8001bda <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001b9a:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <HAL_RCC_OscConfig+0x7ac>)
 8001b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9e:	4a11      	ldr	r2, [pc, #68]	@ (8001be4 <HAL_RCC_OscConfig+0x7ac>)
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ba6:	f7ff f959 	bl	8000e5c <HAL_GetTick>
 8001baa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001bac:	bf00      	nop
 8001bae:	f7ff f955 	bl	8000e5c <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d0f9      	beq.n	8001bae <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001bba:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <HAL_RCC_OscConfig+0x7ac>)
 8001bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <HAL_RCC_OscConfig+0x7b0>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001bc6:	00d2      	lsls	r2, r2, #3
 8001bc8:	4906      	ldr	r1, [pc, #24]	@ (8001be4 <HAL_RCC_OscConfig+0x7ac>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001bce:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <HAL_RCC_OscConfig+0x7ac>)
 8001bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd2:	4a04      	ldr	r2, [pc, #16]	@ (8001be4 <HAL_RCC_OscConfig+0x7ac>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3730      	adds	r7, #48	@ 0x30
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	58024400 	.word	0x58024400
 8001be8:	ffff0007 	.word	0xffff0007

08001bec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e19c      	b.n	8001f3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b8a      	ldr	r3, [pc, #552]	@ (8001e2c <HAL_RCC_ClockConfig+0x240>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d910      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b87      	ldr	r3, [pc, #540]	@ (8001e2c <HAL_RCC_ClockConfig+0x240>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 020f 	bic.w	r2, r3, #15
 8001c16:	4985      	ldr	r1, [pc, #532]	@ (8001e2c <HAL_RCC_ClockConfig+0x240>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b83      	ldr	r3, [pc, #524]	@ (8001e2c <HAL_RCC_ClockConfig+0x240>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e184      	b.n	8001f3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d010      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	4b7b      	ldr	r3, [pc, #492]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d908      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c4c:	4b78      	ldr	r3, [pc, #480]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	4975      	ldr	r1, [pc, #468]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d010      	beq.n	8001c8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695a      	ldr	r2, [r3, #20]
 8001c6e:	4b70      	ldr	r3, [pc, #448]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d908      	bls.n	8001c8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c7a:	4b6d      	ldr	r3, [pc, #436]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	496a      	ldr	r1, [pc, #424]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d010      	beq.n	8001cba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699a      	ldr	r2, [r3, #24]
 8001c9c:	4b64      	ldr	r3, [pc, #400]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d908      	bls.n	8001cba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ca8:	4b61      	ldr	r3, [pc, #388]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	495e      	ldr	r1, [pc, #376]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d010      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69da      	ldr	r2, [r3, #28]
 8001cca:	4b59      	ldr	r3, [pc, #356]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d908      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001cd6:	4b56      	ldr	r3, [pc, #344]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4953      	ldr	r1, [pc, #332]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d010      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	4b4d      	ldr	r3, [pc, #308]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d908      	bls.n	8001d16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d04:	4b4a      	ldr	r3, [pc, #296]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f023 020f 	bic.w	r2, r3, #15
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4947      	ldr	r1, [pc, #284]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d055      	beq.n	8001dce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d22:	4b43      	ldr	r3, [pc, #268]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	4940      	ldr	r1, [pc, #256]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d107      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d3c:	4b3c      	ldr	r3, [pc, #240]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d121      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0f6      	b.n	8001f3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d54:	4b36      	ldr	r3, [pc, #216]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d115      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0ea      	b.n	8001f3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d107      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d6c:	4b30      	ldr	r3, [pc, #192]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d109      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0de      	b.n	8001f3a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0d6      	b.n	8001f3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d8c:	4b28      	ldr	r3, [pc, #160]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	f023 0207 	bic.w	r2, r3, #7
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	4925      	ldr	r1, [pc, #148]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d9e:	f7ff f85d 	bl	8000e5c <HAL_GetTick>
 8001da2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da4:	e00a      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da6:	f7ff f859 	bl	8000e5c <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e0be      	b.n	8001f3a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d1eb      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d010      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	4b14      	ldr	r3, [pc, #80]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d208      	bcs.n	8001dfc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dea:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f023 020f 	bic.w	r2, r3, #15
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	490e      	ldr	r1, [pc, #56]	@ (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e2c <HAL_RCC_ClockConfig+0x240>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d214      	bcs.n	8001e34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <HAL_RCC_ClockConfig+0x240>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 020f 	bic.w	r2, r3, #15
 8001e12:	4906      	ldr	r1, [pc, #24]	@ (8001e2c <HAL_RCC_ClockConfig+0x240>)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	4b04      	ldr	r3, [pc, #16]	@ (8001e2c <HAL_RCC_ClockConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e086      	b.n	8001f3a <HAL_RCC_ClockConfig+0x34e>
 8001e2c:	52002000 	.word	0x52002000
 8001e30:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d010      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	4b3f      	ldr	r3, [pc, #252]	@ (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d208      	bcs.n	8001e62 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e50:	4b3c      	ldr	r3, [pc, #240]	@ (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	4939      	ldr	r1, [pc, #228]	@ (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d010      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	4b34      	ldr	r3, [pc, #208]	@ (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d208      	bcs.n	8001e90 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e7e:	4b31      	ldr	r3, [pc, #196]	@ (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	492e      	ldr	r1, [pc, #184]	@ (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d010      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699a      	ldr	r2, [r3, #24]
 8001ea0:	4b28      	ldr	r3, [pc, #160]	@ (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d208      	bcs.n	8001ebe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001eac:	4b25      	ldr	r3, [pc, #148]	@ (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	4922      	ldr	r1, [pc, #136]	@ (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d010      	beq.n	8001eec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69da      	ldr	r2, [r3, #28]
 8001ece:	4b1d      	ldr	r3, [pc, #116]	@ (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d208      	bcs.n	8001eec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001eda:	4b1a      	ldr	r3, [pc, #104]	@ (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	4917      	ldr	r1, [pc, #92]	@ (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001eec:	f000 f834 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b14      	ldr	r3, [pc, #80]	@ (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	4912      	ldr	r1, [pc, #72]	@ (8001f48 <HAL_RCC_ClockConfig+0x35c>)
 8001efe:	5ccb      	ldrb	r3, [r1, r3]
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
 8001f08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	4a0d      	ldr	r2, [pc, #52]	@ (8001f48 <HAL_RCC_ClockConfig+0x35c>)
 8001f14:	5cd3      	ldrb	r3, [r2, r3]
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f20:	4a0a      	ldr	r2, [pc, #40]	@ (8001f4c <HAL_RCC_ClockConfig+0x360>)
 8001f22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f24:	4a0a      	ldr	r2, [pc, #40]	@ (8001f50 <HAL_RCC_ClockConfig+0x364>)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f54 <HAL_RCC_ClockConfig+0x368>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe ff4a 	bl	8000dc8 <HAL_InitTick>
 8001f34:	4603      	mov	r3, r0
 8001f36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	58024400 	.word	0x58024400
 8001f48:	080045b0 	.word	0x080045b0
 8001f4c:	24000004 	.word	0x24000004
 8001f50:	24000000 	.word	0x24000000
 8001f54:	24000008 	.word	0x24000008

08001f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	@ 0x24
 8001f5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f5e:	4bb3      	ldr	r3, [pc, #716]	@ (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f66:	2b18      	cmp	r3, #24
 8001f68:	f200 8155 	bhi.w	8002216 <HAL_RCC_GetSysClockFreq+0x2be>
 8001f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f72:	bf00      	nop
 8001f74:	08001fd9 	.word	0x08001fd9
 8001f78:	08002217 	.word	0x08002217
 8001f7c:	08002217 	.word	0x08002217
 8001f80:	08002217 	.word	0x08002217
 8001f84:	08002217 	.word	0x08002217
 8001f88:	08002217 	.word	0x08002217
 8001f8c:	08002217 	.word	0x08002217
 8001f90:	08002217 	.word	0x08002217
 8001f94:	08001fff 	.word	0x08001fff
 8001f98:	08002217 	.word	0x08002217
 8001f9c:	08002217 	.word	0x08002217
 8001fa0:	08002217 	.word	0x08002217
 8001fa4:	08002217 	.word	0x08002217
 8001fa8:	08002217 	.word	0x08002217
 8001fac:	08002217 	.word	0x08002217
 8001fb0:	08002217 	.word	0x08002217
 8001fb4:	08002005 	.word	0x08002005
 8001fb8:	08002217 	.word	0x08002217
 8001fbc:	08002217 	.word	0x08002217
 8001fc0:	08002217 	.word	0x08002217
 8001fc4:	08002217 	.word	0x08002217
 8001fc8:	08002217 	.word	0x08002217
 8001fcc:	08002217 	.word	0x08002217
 8001fd0:	08002217 	.word	0x08002217
 8001fd4:	0800200b 	.word	0x0800200b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fd8:	4b94      	ldr	r3, [pc, #592]	@ (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d009      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001fe4:	4b91      	ldr	r3, [pc, #580]	@ (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	08db      	lsrs	r3, r3, #3
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	4a90      	ldr	r2, [pc, #576]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001ff6:	e111      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001ff8:	4b8d      	ldr	r3, [pc, #564]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ffa:	61bb      	str	r3, [r7, #24]
      break;
 8001ffc:	e10e      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001ffe:	4b8d      	ldr	r3, [pc, #564]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002000:	61bb      	str	r3, [r7, #24]
      break;
 8002002:	e10b      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002004:	4b8c      	ldr	r3, [pc, #560]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002006:	61bb      	str	r3, [r7, #24]
      break;
 8002008:	e108      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800200a:	4b88      	ldr	r3, [pc, #544]	@ (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800200c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002014:	4b85      	ldr	r3, [pc, #532]	@ (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800201e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002020:	4b82      	ldr	r3, [pc, #520]	@ (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800202a:	4b80      	ldr	r3, [pc, #512]	@ (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800202c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800202e:	08db      	lsrs	r3, r3, #3
 8002030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	fb02 f303 	mul.w	r3, r2, r3
 800203a:	ee07 3a90 	vmov	s15, r3
 800203e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002042:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80e1 	beq.w	8002210 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	2b02      	cmp	r3, #2
 8002052:	f000 8083 	beq.w	800215c <HAL_RCC_GetSysClockFreq+0x204>
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b02      	cmp	r3, #2
 800205a:	f200 80a1 	bhi.w	80021a0 <HAL_RCC_GetSysClockFreq+0x248>
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0x114>
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d056      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x1c0>
 800206a:	e099      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800206c:	4b6f      	ldr	r3, [pc, #444]	@ (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0320 	and.w	r3, r3, #32
 8002074:	2b00      	cmp	r3, #0
 8002076:	d02d      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002078:	4b6c      	ldr	r3, [pc, #432]	@ (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	08db      	lsrs	r3, r3, #3
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	4a6b      	ldr	r2, [pc, #428]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
 8002088:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	ee07 3a90 	vmov	s15, r3
 8002090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	ee07 3a90 	vmov	s15, r3
 800209a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800209e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020a2:	4b62      	ldr	r3, [pc, #392]	@ (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020aa:	ee07 3a90 	vmov	s15, r3
 80020ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80020b6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800223c <HAL_RCC_GetSysClockFreq+0x2e4>
 80020ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80020d2:	e087      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	ee07 3a90 	vmov	s15, r3
 80020da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020de:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002240 <HAL_RCC_GetSysClockFreq+0x2e8>
 80020e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020e6:	4b51      	ldr	r3, [pc, #324]	@ (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ee:	ee07 3a90 	vmov	s15, r3
 80020f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80020fa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800223c <HAL_RCC_GetSysClockFreq+0x2e4>
 80020fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800210a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800210e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002112:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002116:	e065      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	ee07 3a90 	vmov	s15, r3
 800211e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002122:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002244 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800212a:	4b40      	ldr	r3, [pc, #256]	@ (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002132:	ee07 3a90 	vmov	s15, r3
 8002136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800213a:	ed97 6a02 	vldr	s12, [r7, #8]
 800213e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800223c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800214a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800214e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002156:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800215a:	e043      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	ee07 3a90 	vmov	s15, r3
 8002162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002166:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002248 <HAL_RCC_GetSysClockFreq+0x2f0>
 800216a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800216e:	4b2f      	ldr	r3, [pc, #188]	@ (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002176:	ee07 3a90 	vmov	s15, r3
 800217a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800217e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002182:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800223c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800218a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800218e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800219e:	e021      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021aa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002244 <HAL_RCC_GetSysClockFreq+0x2ec>
 80021ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021b2:	4b1e      	ldr	r3, [pc, #120]	@ (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ba:	ee07 3a90 	vmov	s15, r3
 80021be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80021c6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800223c <HAL_RCC_GetSysClockFreq+0x2e4>
 80021ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80021e4:	4b11      	ldr	r3, [pc, #68]	@ (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e8:	0a5b      	lsrs	r3, r3, #9
 80021ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021ee:	3301      	adds	r3, #1
 80021f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	ee07 3a90 	vmov	s15, r3
 80021f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002208:	ee17 3a90 	vmov	r3, s15
 800220c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800220e:	e005      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	61bb      	str	r3, [r7, #24]
      break;
 8002214:	e002      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002216:	4b07      	ldr	r3, [pc, #28]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002218:	61bb      	str	r3, [r7, #24]
      break;
 800221a:	bf00      	nop
  }

  return sysclockfreq;
 800221c:	69bb      	ldr	r3, [r7, #24]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3724      	adds	r7, #36	@ 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	58024400 	.word	0x58024400
 8002230:	03d09000 	.word	0x03d09000
 8002234:	003d0900 	.word	0x003d0900
 8002238:	017d7840 	.word	0x017d7840
 800223c:	46000000 	.word	0x46000000
 8002240:	4c742400 	.word	0x4c742400
 8002244:	4a742400 	.word	0x4a742400
 8002248:	4bbebc20 	.word	0x4bbebc20

0800224c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002252:	f7ff fe81 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8002256:	4602      	mov	r2, r0
 8002258:	4b10      	ldr	r3, [pc, #64]	@ (800229c <HAL_RCC_GetHCLKFreq+0x50>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	490f      	ldr	r1, [pc, #60]	@ (80022a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002264:	5ccb      	ldrb	r3, [r1, r3]
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	fa22 f303 	lsr.w	r3, r2, r3
 800226e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002270:	4b0a      	ldr	r3, [pc, #40]	@ (800229c <HAL_RCC_GetHCLKFreq+0x50>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	4a09      	ldr	r2, [pc, #36]	@ (80022a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800227a:	5cd3      	ldrb	r3, [r2, r3]
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	fa22 f303 	lsr.w	r3, r2, r3
 8002286:	4a07      	ldr	r2, [pc, #28]	@ (80022a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002288:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800228a:	4a07      	ldr	r2, [pc, #28]	@ (80022a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002290:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	58024400 	.word	0x58024400
 80022a0:	080045b0 	.word	0x080045b0
 80022a4:	24000004 	.word	0x24000004
 80022a8:	24000000 	.word	0x24000000

080022ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80022b0:	f7ff ffcc 	bl	800224c <HAL_RCC_GetHCLKFreq>
 80022b4:	4602      	mov	r2, r0
 80022b6:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	091b      	lsrs	r3, r3, #4
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	4904      	ldr	r1, [pc, #16]	@ (80022d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022c2:	5ccb      	ldrb	r3, [r1, r3]
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	58024400 	.word	0x58024400
 80022d4:	080045b0 	.word	0x080045b0

080022d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80022dc:	f7ff ffb6 	bl	800224c <HAL_RCC_GetHCLKFreq>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	0a1b      	lsrs	r3, r3, #8
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	4904      	ldr	r1, [pc, #16]	@ (8002300 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022ee:	5ccb      	ldrb	r3, [r1, r3]
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	58024400 	.word	0x58024400
 8002300:	080045b0 	.word	0x080045b0

08002304 <HAL_RCCEx_GetD1PCLK1Freq>:
  * @note   Each time D1PCLK1 changes, this function must be called to update the
  *         right D1PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D1PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD1PCLK1Freq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1PPRE)
  /* Get HCLK source and Compute D1PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1PPRE) >> RCC_D1CFGR_D1PPRE_Pos] & 0x1FU));
 8002308:	f7ff ffa0 	bl	800224c <HAL_RCC_GetHCLKFreq>
 800230c:	4602      	mov	r2, r0
 800230e:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <HAL_RCCEx_GetD1PCLK1Freq+0x24>)
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	091b      	lsrs	r3, r3, #4
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	4904      	ldr	r1, [pc, #16]	@ (800232c <HAL_RCCEx_GetD1PCLK1Freq+0x28>)
 800231a:	5ccb      	ldrb	r3, [r1, r3]
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D1PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE) >> RCC_CDCFGR1_CDPPRE_Pos] & 0x1FU));
#endif
}
 8002324:	4618      	mov	r0, r3
 8002326:	bd80      	pop	{r7, pc}
 8002328:	58024400 	.word	0x58024400
 800232c:	080045b0 	.word	0x080045b0

08002330 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002334:	f7ff ff8a 	bl	800224c <HAL_RCC_GetHCLKFreq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	4904      	ldr	r1, [pc, #16]	@ (8002358 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002350:	4618      	mov	r0, r3
 8002352:	bd80      	pop	{r7, pc}
 8002354:	58024400 	.word	0x58024400
 8002358:	080045b0 	.word	0x080045b0

0800235c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	@ 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002364:	4ba1      	ldr	r3, [pc, #644]	@ (80025ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800236e:	4b9f      	ldr	r3, [pc, #636]	@ (80025ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002372:	0b1b      	lsrs	r3, r3, #12
 8002374:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002378:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800237a:	4b9c      	ldr	r3, [pc, #624]	@ (80025ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800237c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237e:	091b      	lsrs	r3, r3, #4
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8002386:	4b99      	ldr	r3, [pc, #612]	@ (80025ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800238a:	08db      	lsrs	r3, r3, #3
 800238c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	fb02 f303 	mul.w	r3, r2, r3
 8002396:	ee07 3a90 	vmov	s15, r3
 800239a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800239e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 8111 	beq.w	80025cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	f000 8083 	beq.w	80024b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	f200 80a1 	bhi.w	80024fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d056      	beq.n	8002474 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80023c6:	e099      	b.n	80024fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023c8:	4b88      	ldr	r3, [pc, #544]	@ (80025ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d02d      	beq.n	8002430 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80023d4:	4b85      	ldr	r3, [pc, #532]	@ (80025ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	08db      	lsrs	r3, r3, #3
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	4a84      	ldr	r2, [pc, #528]	@ (80025f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
 80023e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	ee07 3a90 	vmov	s15, r3
 80023ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	ee07 3a90 	vmov	s15, r3
 80023f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023fe:	4b7b      	ldr	r3, [pc, #492]	@ (80025ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002406:	ee07 3a90 	vmov	s15, r3
 800240a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800240e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002412:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80025f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800241a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800241e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800242e:	e087      	b.n	8002540 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800243a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80025f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800243e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002442:	4b6a      	ldr	r3, [pc, #424]	@ (80025ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800244a:	ee07 3a90 	vmov	s15, r3
 800244e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002452:	ed97 6a03 	vldr	s12, [r7, #12]
 8002456:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80025f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800245a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800245e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800246a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002472:	e065      	b.n	8002540 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800247e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80025fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002486:	4b59      	ldr	r3, [pc, #356]	@ (80025ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800248a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002496:	ed97 6a03 	vldr	s12, [r7, #12]
 800249a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80025f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800249e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024b6:	e043      	b.n	8002540 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002600 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80024c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ca:	4b48      	ldr	r3, [pc, #288]	@ (80025ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80024cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d2:	ee07 3a90 	vmov	s15, r3
 80024d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024da:	ed97 6a03 	vldr	s12, [r7, #12]
 80024de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80025f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80024e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024fa:	e021      	b.n	8002540 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	ee07 3a90 	vmov	s15, r3
 8002502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002506:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80025fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800250a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800250e:	4b37      	ldr	r3, [pc, #220]	@ (80025ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800251e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002522:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80025f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800252a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800252e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800253e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002540:	4b2a      	ldr	r3, [pc, #168]	@ (80025ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002544:	0a5b      	lsrs	r3, r3, #9
 8002546:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800254a:	ee07 3a90 	vmov	s15, r3
 800254e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002552:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002556:	ee37 7a87 	vadd.f32	s14, s15, s14
 800255a:	edd7 6a07 	vldr	s13, [r7, #28]
 800255e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002566:	ee17 2a90 	vmov	r2, s15
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800256e:	4b1f      	ldr	r3, [pc, #124]	@ (80025ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002572:	0c1b      	lsrs	r3, r3, #16
 8002574:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002578:	ee07 3a90 	vmov	s15, r3
 800257c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002580:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002584:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002588:	edd7 6a07 	vldr	s13, [r7, #28]
 800258c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002594:	ee17 2a90 	vmov	r2, s15
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800259c:	4b13      	ldr	r3, [pc, #76]	@ (80025ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800259e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a0:	0e1b      	lsrs	r3, r3, #24
 80025a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025a6:	ee07 3a90 	vmov	s15, r3
 80025aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80025b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80025b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80025ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025c2:	ee17 2a90 	vmov	r2, s15
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80025ca:	e008      	b.n	80025de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
}
 80025de:	bf00      	nop
 80025e0:	3724      	adds	r7, #36	@ 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	58024400 	.word	0x58024400
 80025f0:	03d09000 	.word	0x03d09000
 80025f4:	46000000 	.word	0x46000000
 80025f8:	4c742400 	.word	0x4c742400
 80025fc:	4a742400 	.word	0x4a742400
 8002600:	4bbebc20 	.word	0x4bbebc20

08002604 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	@ 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800260c:	4ba1      	ldr	r3, [pc, #644]	@ (8002894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800260e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002616:	4b9f      	ldr	r3, [pc, #636]	@ (8002894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261a:	0d1b      	lsrs	r3, r3, #20
 800261c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002620:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002622:	4b9c      	ldr	r3, [pc, #624]	@ (8002894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800262e:	4b99      	ldr	r3, [pc, #612]	@ (8002894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	08db      	lsrs	r3, r3, #3
 8002634:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	fb02 f303 	mul.w	r3, r2, r3
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002646:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 8111 	beq.w	8002874 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	2b02      	cmp	r3, #2
 8002656:	f000 8083 	beq.w	8002760 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	2b02      	cmp	r3, #2
 800265e:	f200 80a1 	bhi.w	80027a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d056      	beq.n	800271c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800266e:	e099      	b.n	80027a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002670:	4b88      	ldr	r3, [pc, #544]	@ (8002894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	2b00      	cmp	r3, #0
 800267a:	d02d      	beq.n	80026d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800267c:	4b85      	ldr	r3, [pc, #532]	@ (8002894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	08db      	lsrs	r3, r3, #3
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	4a84      	ldr	r2, [pc, #528]	@ (8002898 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
 800268c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	ee07 3a90 	vmov	s15, r3
 8002694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	ee07 3a90 	vmov	s15, r3
 800269e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026a6:	4b7b      	ldr	r3, [pc, #492]	@ (8002894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ae:	ee07 3a90 	vmov	s15, r3
 80026b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80026ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800289c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80026be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80026d6:	e087      	b.n	80027e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	ee07 3a90 	vmov	s15, r3
 80026de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80028a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80026e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f2:	ee07 3a90 	vmov	s15, r3
 80026f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80026fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800289c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800270a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800270e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800271a:	e065      	b.n	80027e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	ee07 3a90 	vmov	s15, r3
 8002722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002726:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80028a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800272a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800272e:	4b59      	ldr	r3, [pc, #356]	@ (8002894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002736:	ee07 3a90 	vmov	s15, r3
 800273a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800273e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002742:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800289c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800274a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800274e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800275a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800275e:	e043      	b.n	80027e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	ee07 3a90 	vmov	s15, r3
 8002766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800276a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80028a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800276e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002772:	4b48      	ldr	r3, [pc, #288]	@ (8002894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002782:	ed97 6a03 	vldr	s12, [r7, #12]
 8002786:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800289c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800278a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800278e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800279a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800279e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027a2:	e021      	b.n	80027e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	ee07 3a90 	vmov	s15, r3
 80027aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80028a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80027b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027b6:	4b37      	ldr	r3, [pc, #220]	@ (8002894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027be:	ee07 3a90 	vmov	s15, r3
 80027c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80027ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800289c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80027ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80027e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80027ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ec:	0a5b      	lsrs	r3, r3, #9
 80027ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027f2:	ee07 3a90 	vmov	s15, r3
 80027f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80027fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002802:	edd7 6a07 	vldr	s13, [r7, #28]
 8002806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800280a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800280e:	ee17 2a90 	vmov	r2, s15
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8002816:	4b1f      	ldr	r3, [pc, #124]	@ (8002894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	0c1b      	lsrs	r3, r3, #16
 800281c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002820:	ee07 3a90 	vmov	s15, r3
 8002824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002828:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800282c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002830:	edd7 6a07 	vldr	s13, [r7, #28]
 8002834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800283c:	ee17 2a90 	vmov	r2, s15
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8002844:	4b13      	ldr	r3, [pc, #76]	@ (8002894 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	0e1b      	lsrs	r3, r3, #24
 800284a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800284e:	ee07 3a90 	vmov	s15, r3
 8002852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002856:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800285a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800285e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800286a:	ee17 2a90 	vmov	r2, s15
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8002872:	e008      	b.n	8002886 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
}
 8002886:	bf00      	nop
 8002888:	3724      	adds	r7, #36	@ 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	58024400 	.word	0x58024400
 8002898:	03d09000 	.word	0x03d09000
 800289c:	46000000 	.word	0x46000000
 80028a0:	4c742400 	.word	0x4c742400
 80028a4:	4a742400 	.word	0x4a742400
 80028a8:	4bbebc20 	.word	0x4bbebc20

080028ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e042      	b.n	8002944 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d106      	bne.n	80028d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7fe f8df 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2224      	movs	r2, #36	@ 0x24
 80028da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 ff22 	bl	8003740 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f8b3 	bl	8002a68 <UART_SetConfig>
 8002902:	4603      	mov	r3, r0
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e01b      	b.n	8002944 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800291a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800292a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 ffa1 	bl	8003884 <UART_CheckIdleState>
 8002942:	4603      	mov	r3, r0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	@ 0x28
 8002950:	af02      	add	r7, sp, #8
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002962:	2b20      	cmp	r3, #32
 8002964:	d17b      	bne.n	8002a5e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <HAL_UART_Transmit+0x26>
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e074      	b.n	8002a60 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2221      	movs	r2, #33	@ 0x21
 8002982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002986:	f7fe fa69 	bl	8000e5c <HAL_GetTick>
 800298a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	88fa      	ldrh	r2, [r7, #6]
 8002990:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	88fa      	ldrh	r2, [r7, #6]
 8002998:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029a4:	d108      	bne.n	80029b8 <HAL_UART_Transmit+0x6c>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d104      	bne.n	80029b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	61bb      	str	r3, [r7, #24]
 80029b6:	e003      	b.n	80029c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029c0:	e030      	b.n	8002a24 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2200      	movs	r2, #0
 80029ca:	2180      	movs	r1, #128	@ 0x80
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f001 f803 	bl	80039d8 <UART_WaitOnFlagUntilTimeout>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e03d      	b.n	8002a60 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10b      	bne.n	8002a02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	3302      	adds	r3, #2
 80029fe:	61bb      	str	r3, [r7, #24]
 8002a00:	e007      	b.n	8002a12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	781a      	ldrb	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1c8      	bne.n	80029c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2200      	movs	r2, #0
 8002a38:	2140      	movs	r1, #64	@ 0x40
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 ffcc 	bl	80039d8 <UART_WaitOnFlagUntilTimeout>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d005      	beq.n	8002a52 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e006      	b.n	8002a60 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e000      	b.n	8002a60 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002a5e:	2302      	movs	r3, #2
  }
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3720      	adds	r7, #32
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a6c:	b092      	sub	sp, #72	@ 0x48
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	431a      	orrs	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4bbe      	ldr	r3, [pc, #760]	@ (8002d90 <UART_SetConfig+0x328>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4ab3      	ldr	r2, [pc, #716]	@ (8002d94 <UART_SetConfig+0x32c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d004      	beq.n	8002ad4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	4baf      	ldr	r3, [pc, #700]	@ (8002d98 <UART_SetConfig+0x330>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aee:	f023 010f 	bic.w	r1, r3, #15
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4aa6      	ldr	r2, [pc, #664]	@ (8002d9c <UART_SetConfig+0x334>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d177      	bne.n	8002bf8 <UART_SetConfig+0x190>
 8002b08:	4ba5      	ldr	r3, [pc, #660]	@ (8002da0 <UART_SetConfig+0x338>)
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b10:	2b28      	cmp	r3, #40	@ 0x28
 8002b12:	d86d      	bhi.n	8002bf0 <UART_SetConfig+0x188>
 8002b14:	a201      	add	r2, pc, #4	@ (adr r2, 8002b1c <UART_SetConfig+0xb4>)
 8002b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1a:	bf00      	nop
 8002b1c:	08002bc1 	.word	0x08002bc1
 8002b20:	08002bf1 	.word	0x08002bf1
 8002b24:	08002bf1 	.word	0x08002bf1
 8002b28:	08002bf1 	.word	0x08002bf1
 8002b2c:	08002bf1 	.word	0x08002bf1
 8002b30:	08002bf1 	.word	0x08002bf1
 8002b34:	08002bf1 	.word	0x08002bf1
 8002b38:	08002bf1 	.word	0x08002bf1
 8002b3c:	08002bc9 	.word	0x08002bc9
 8002b40:	08002bf1 	.word	0x08002bf1
 8002b44:	08002bf1 	.word	0x08002bf1
 8002b48:	08002bf1 	.word	0x08002bf1
 8002b4c:	08002bf1 	.word	0x08002bf1
 8002b50:	08002bf1 	.word	0x08002bf1
 8002b54:	08002bf1 	.word	0x08002bf1
 8002b58:	08002bf1 	.word	0x08002bf1
 8002b5c:	08002bd1 	.word	0x08002bd1
 8002b60:	08002bf1 	.word	0x08002bf1
 8002b64:	08002bf1 	.word	0x08002bf1
 8002b68:	08002bf1 	.word	0x08002bf1
 8002b6c:	08002bf1 	.word	0x08002bf1
 8002b70:	08002bf1 	.word	0x08002bf1
 8002b74:	08002bf1 	.word	0x08002bf1
 8002b78:	08002bf1 	.word	0x08002bf1
 8002b7c:	08002bd9 	.word	0x08002bd9
 8002b80:	08002bf1 	.word	0x08002bf1
 8002b84:	08002bf1 	.word	0x08002bf1
 8002b88:	08002bf1 	.word	0x08002bf1
 8002b8c:	08002bf1 	.word	0x08002bf1
 8002b90:	08002bf1 	.word	0x08002bf1
 8002b94:	08002bf1 	.word	0x08002bf1
 8002b98:	08002bf1 	.word	0x08002bf1
 8002b9c:	08002be1 	.word	0x08002be1
 8002ba0:	08002bf1 	.word	0x08002bf1
 8002ba4:	08002bf1 	.word	0x08002bf1
 8002ba8:	08002bf1 	.word	0x08002bf1
 8002bac:	08002bf1 	.word	0x08002bf1
 8002bb0:	08002bf1 	.word	0x08002bf1
 8002bb4:	08002bf1 	.word	0x08002bf1
 8002bb8:	08002bf1 	.word	0x08002bf1
 8002bbc:	08002be9 	.word	0x08002be9
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002bc6:	e326      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002bc8:	2304      	movs	r3, #4
 8002bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002bce:	e322      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002bd0:	2308      	movs	r3, #8
 8002bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002bd6:	e31e      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002bd8:	2310      	movs	r3, #16
 8002bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002bde:	e31a      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002be0:	2320      	movs	r3, #32
 8002be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002be6:	e316      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002be8:	2340      	movs	r3, #64	@ 0x40
 8002bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002bee:	e312      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002bf0:	2380      	movs	r3, #128	@ 0x80
 8002bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002bf6:	e30e      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a69      	ldr	r2, [pc, #420]	@ (8002da4 <UART_SetConfig+0x33c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d130      	bne.n	8002c64 <UART_SetConfig+0x1fc>
 8002c02:	4b67      	ldr	r3, [pc, #412]	@ (8002da0 <UART_SetConfig+0x338>)
 8002c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	2b05      	cmp	r3, #5
 8002c0c:	d826      	bhi.n	8002c5c <UART_SetConfig+0x1f4>
 8002c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c14 <UART_SetConfig+0x1ac>)
 8002c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c14:	08002c2d 	.word	0x08002c2d
 8002c18:	08002c35 	.word	0x08002c35
 8002c1c:	08002c3d 	.word	0x08002c3d
 8002c20:	08002c45 	.word	0x08002c45
 8002c24:	08002c4d 	.word	0x08002c4d
 8002c28:	08002c55 	.word	0x08002c55
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002c32:	e2f0      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002c34:	2304      	movs	r3, #4
 8002c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002c3a:	e2ec      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002c3c:	2308      	movs	r3, #8
 8002c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002c42:	e2e8      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002c44:	2310      	movs	r3, #16
 8002c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002c4a:	e2e4      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002c4c:	2320      	movs	r3, #32
 8002c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002c52:	e2e0      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002c54:	2340      	movs	r3, #64	@ 0x40
 8002c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002c5a:	e2dc      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002c5c:	2380      	movs	r3, #128	@ 0x80
 8002c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002c62:	e2d8      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a4f      	ldr	r2, [pc, #316]	@ (8002da8 <UART_SetConfig+0x340>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d130      	bne.n	8002cd0 <UART_SetConfig+0x268>
 8002c6e:	4b4c      	ldr	r3, [pc, #304]	@ (8002da0 <UART_SetConfig+0x338>)
 8002c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	2b05      	cmp	r3, #5
 8002c78:	d826      	bhi.n	8002cc8 <UART_SetConfig+0x260>
 8002c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c80 <UART_SetConfig+0x218>)
 8002c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c80:	08002c99 	.word	0x08002c99
 8002c84:	08002ca1 	.word	0x08002ca1
 8002c88:	08002ca9 	.word	0x08002ca9
 8002c8c:	08002cb1 	.word	0x08002cb1
 8002c90:	08002cb9 	.word	0x08002cb9
 8002c94:	08002cc1 	.word	0x08002cc1
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002c9e:	e2ba      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002ca0:	2304      	movs	r3, #4
 8002ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002ca6:	e2b6      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002ca8:	2308      	movs	r3, #8
 8002caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002cae:	e2b2      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002cb0:	2310      	movs	r3, #16
 8002cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002cb6:	e2ae      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002cb8:	2320      	movs	r3, #32
 8002cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002cbe:	e2aa      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002cc0:	2340      	movs	r3, #64	@ 0x40
 8002cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002cc6:	e2a6      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002cc8:	2380      	movs	r3, #128	@ 0x80
 8002cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002cce:	e2a2      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a35      	ldr	r2, [pc, #212]	@ (8002dac <UART_SetConfig+0x344>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d130      	bne.n	8002d3c <UART_SetConfig+0x2d4>
 8002cda:	4b31      	ldr	r3, [pc, #196]	@ (8002da0 <UART_SetConfig+0x338>)
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	2b05      	cmp	r3, #5
 8002ce4:	d826      	bhi.n	8002d34 <UART_SetConfig+0x2cc>
 8002ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8002cec <UART_SetConfig+0x284>)
 8002ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cec:	08002d05 	.word	0x08002d05
 8002cf0:	08002d0d 	.word	0x08002d0d
 8002cf4:	08002d15 	.word	0x08002d15
 8002cf8:	08002d1d 	.word	0x08002d1d
 8002cfc:	08002d25 	.word	0x08002d25
 8002d00:	08002d2d 	.word	0x08002d2d
 8002d04:	2300      	movs	r3, #0
 8002d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002d0a:	e284      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002d0c:	2304      	movs	r3, #4
 8002d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002d12:	e280      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002d14:	2308      	movs	r3, #8
 8002d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002d1a:	e27c      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002d1c:	2310      	movs	r3, #16
 8002d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002d22:	e278      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002d24:	2320      	movs	r3, #32
 8002d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002d2a:	e274      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002d2c:	2340      	movs	r3, #64	@ 0x40
 8002d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002d32:	e270      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002d34:	2380      	movs	r3, #128	@ 0x80
 8002d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002d3a:	e26c      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a1b      	ldr	r2, [pc, #108]	@ (8002db0 <UART_SetConfig+0x348>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d142      	bne.n	8002dcc <UART_SetConfig+0x364>
 8002d46:	4b16      	ldr	r3, [pc, #88]	@ (8002da0 <UART_SetConfig+0x338>)
 8002d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	2b05      	cmp	r3, #5
 8002d50:	d838      	bhi.n	8002dc4 <UART_SetConfig+0x35c>
 8002d52:	a201      	add	r2, pc, #4	@ (adr r2, 8002d58 <UART_SetConfig+0x2f0>)
 8002d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d58:	08002d71 	.word	0x08002d71
 8002d5c:	08002d79 	.word	0x08002d79
 8002d60:	08002d81 	.word	0x08002d81
 8002d64:	08002d89 	.word	0x08002d89
 8002d68:	08002db5 	.word	0x08002db5
 8002d6c:	08002dbd 	.word	0x08002dbd
 8002d70:	2300      	movs	r3, #0
 8002d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002d76:	e24e      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002d78:	2304      	movs	r3, #4
 8002d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002d7e:	e24a      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002d80:	2308      	movs	r3, #8
 8002d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002d86:	e246      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002d88:	2310      	movs	r3, #16
 8002d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002d8e:	e242      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002d90:	cfff69f3 	.word	0xcfff69f3
 8002d94:	58000c00 	.word	0x58000c00
 8002d98:	11fff4ff 	.word	0x11fff4ff
 8002d9c:	40011000 	.word	0x40011000
 8002da0:	58024400 	.word	0x58024400
 8002da4:	40004400 	.word	0x40004400
 8002da8:	40004800 	.word	0x40004800
 8002dac:	40004c00 	.word	0x40004c00
 8002db0:	40005000 	.word	0x40005000
 8002db4:	2320      	movs	r3, #32
 8002db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002dba:	e22c      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002dbc:	2340      	movs	r3, #64	@ 0x40
 8002dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002dc2:	e228      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002dc4:	2380      	movs	r3, #128	@ 0x80
 8002dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002dca:	e224      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4ab1      	ldr	r2, [pc, #708]	@ (8003098 <UART_SetConfig+0x630>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d176      	bne.n	8002ec4 <UART_SetConfig+0x45c>
 8002dd6:	4bb1      	ldr	r3, [pc, #708]	@ (800309c <UART_SetConfig+0x634>)
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dde:	2b28      	cmp	r3, #40	@ 0x28
 8002de0:	d86c      	bhi.n	8002ebc <UART_SetConfig+0x454>
 8002de2:	a201      	add	r2, pc, #4	@ (adr r2, 8002de8 <UART_SetConfig+0x380>)
 8002de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de8:	08002e8d 	.word	0x08002e8d
 8002dec:	08002ebd 	.word	0x08002ebd
 8002df0:	08002ebd 	.word	0x08002ebd
 8002df4:	08002ebd 	.word	0x08002ebd
 8002df8:	08002ebd 	.word	0x08002ebd
 8002dfc:	08002ebd 	.word	0x08002ebd
 8002e00:	08002ebd 	.word	0x08002ebd
 8002e04:	08002ebd 	.word	0x08002ebd
 8002e08:	08002e95 	.word	0x08002e95
 8002e0c:	08002ebd 	.word	0x08002ebd
 8002e10:	08002ebd 	.word	0x08002ebd
 8002e14:	08002ebd 	.word	0x08002ebd
 8002e18:	08002ebd 	.word	0x08002ebd
 8002e1c:	08002ebd 	.word	0x08002ebd
 8002e20:	08002ebd 	.word	0x08002ebd
 8002e24:	08002ebd 	.word	0x08002ebd
 8002e28:	08002e9d 	.word	0x08002e9d
 8002e2c:	08002ebd 	.word	0x08002ebd
 8002e30:	08002ebd 	.word	0x08002ebd
 8002e34:	08002ebd 	.word	0x08002ebd
 8002e38:	08002ebd 	.word	0x08002ebd
 8002e3c:	08002ebd 	.word	0x08002ebd
 8002e40:	08002ebd 	.word	0x08002ebd
 8002e44:	08002ebd 	.word	0x08002ebd
 8002e48:	08002ea5 	.word	0x08002ea5
 8002e4c:	08002ebd 	.word	0x08002ebd
 8002e50:	08002ebd 	.word	0x08002ebd
 8002e54:	08002ebd 	.word	0x08002ebd
 8002e58:	08002ebd 	.word	0x08002ebd
 8002e5c:	08002ebd 	.word	0x08002ebd
 8002e60:	08002ebd 	.word	0x08002ebd
 8002e64:	08002ebd 	.word	0x08002ebd
 8002e68:	08002ead 	.word	0x08002ead
 8002e6c:	08002ebd 	.word	0x08002ebd
 8002e70:	08002ebd 	.word	0x08002ebd
 8002e74:	08002ebd 	.word	0x08002ebd
 8002e78:	08002ebd 	.word	0x08002ebd
 8002e7c:	08002ebd 	.word	0x08002ebd
 8002e80:	08002ebd 	.word	0x08002ebd
 8002e84:	08002ebd 	.word	0x08002ebd
 8002e88:	08002eb5 	.word	0x08002eb5
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002e92:	e1c0      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002e94:	2304      	movs	r3, #4
 8002e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002e9a:	e1bc      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002e9c:	2308      	movs	r3, #8
 8002e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002ea2:	e1b8      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002ea4:	2310      	movs	r3, #16
 8002ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002eaa:	e1b4      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002eac:	2320      	movs	r3, #32
 8002eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002eb2:	e1b0      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002eb4:	2340      	movs	r3, #64	@ 0x40
 8002eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002eba:	e1ac      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002ebc:	2380      	movs	r3, #128	@ 0x80
 8002ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002ec2:	e1a8      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a75      	ldr	r2, [pc, #468]	@ (80030a0 <UART_SetConfig+0x638>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d130      	bne.n	8002f30 <UART_SetConfig+0x4c8>
 8002ece:	4b73      	ldr	r3, [pc, #460]	@ (800309c <UART_SetConfig+0x634>)
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	2b05      	cmp	r3, #5
 8002ed8:	d826      	bhi.n	8002f28 <UART_SetConfig+0x4c0>
 8002eda:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee0 <UART_SetConfig+0x478>)
 8002edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee0:	08002ef9 	.word	0x08002ef9
 8002ee4:	08002f01 	.word	0x08002f01
 8002ee8:	08002f09 	.word	0x08002f09
 8002eec:	08002f11 	.word	0x08002f11
 8002ef0:	08002f19 	.word	0x08002f19
 8002ef4:	08002f21 	.word	0x08002f21
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002efe:	e18a      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002f00:	2304      	movs	r3, #4
 8002f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f06:	e186      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002f08:	2308      	movs	r3, #8
 8002f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f0e:	e182      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002f10:	2310      	movs	r3, #16
 8002f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f16:	e17e      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002f18:	2320      	movs	r3, #32
 8002f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f1e:	e17a      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002f20:	2340      	movs	r3, #64	@ 0x40
 8002f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f26:	e176      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002f28:	2380      	movs	r3, #128	@ 0x80
 8002f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f2e:	e172      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a5b      	ldr	r2, [pc, #364]	@ (80030a4 <UART_SetConfig+0x63c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d130      	bne.n	8002f9c <UART_SetConfig+0x534>
 8002f3a:	4b58      	ldr	r3, [pc, #352]	@ (800309c <UART_SetConfig+0x634>)
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	2b05      	cmp	r3, #5
 8002f44:	d826      	bhi.n	8002f94 <UART_SetConfig+0x52c>
 8002f46:	a201      	add	r2, pc, #4	@ (adr r2, 8002f4c <UART_SetConfig+0x4e4>)
 8002f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4c:	08002f65 	.word	0x08002f65
 8002f50:	08002f6d 	.word	0x08002f6d
 8002f54:	08002f75 	.word	0x08002f75
 8002f58:	08002f7d 	.word	0x08002f7d
 8002f5c:	08002f85 	.word	0x08002f85
 8002f60:	08002f8d 	.word	0x08002f8d
 8002f64:	2300      	movs	r3, #0
 8002f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f6a:	e154      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f72:	e150      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002f74:	2308      	movs	r3, #8
 8002f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f7a:	e14c      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002f7c:	2310      	movs	r3, #16
 8002f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f82:	e148      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002f84:	2320      	movs	r3, #32
 8002f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f8a:	e144      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002f8c:	2340      	movs	r3, #64	@ 0x40
 8002f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f92:	e140      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002f94:	2380      	movs	r3, #128	@ 0x80
 8002f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f9a:	e13c      	b.n	8003216 <UART_SetConfig+0x7ae>
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a41      	ldr	r2, [pc, #260]	@ (80030a8 <UART_SetConfig+0x640>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	f040 8082 	bne.w	80030ac <UART_SetConfig+0x644>
 8002fa8:	4b3c      	ldr	r3, [pc, #240]	@ (800309c <UART_SetConfig+0x634>)
 8002faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fb0:	2b28      	cmp	r3, #40	@ 0x28
 8002fb2:	d86d      	bhi.n	8003090 <UART_SetConfig+0x628>
 8002fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fbc <UART_SetConfig+0x554>)
 8002fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fba:	bf00      	nop
 8002fbc:	08003061 	.word	0x08003061
 8002fc0:	08003091 	.word	0x08003091
 8002fc4:	08003091 	.word	0x08003091
 8002fc8:	08003091 	.word	0x08003091
 8002fcc:	08003091 	.word	0x08003091
 8002fd0:	08003091 	.word	0x08003091
 8002fd4:	08003091 	.word	0x08003091
 8002fd8:	08003091 	.word	0x08003091
 8002fdc:	08003069 	.word	0x08003069
 8002fe0:	08003091 	.word	0x08003091
 8002fe4:	08003091 	.word	0x08003091
 8002fe8:	08003091 	.word	0x08003091
 8002fec:	08003091 	.word	0x08003091
 8002ff0:	08003091 	.word	0x08003091
 8002ff4:	08003091 	.word	0x08003091
 8002ff8:	08003091 	.word	0x08003091
 8002ffc:	08003071 	.word	0x08003071
 8003000:	08003091 	.word	0x08003091
 8003004:	08003091 	.word	0x08003091
 8003008:	08003091 	.word	0x08003091
 800300c:	08003091 	.word	0x08003091
 8003010:	08003091 	.word	0x08003091
 8003014:	08003091 	.word	0x08003091
 8003018:	08003091 	.word	0x08003091
 800301c:	08003079 	.word	0x08003079
 8003020:	08003091 	.word	0x08003091
 8003024:	08003091 	.word	0x08003091
 8003028:	08003091 	.word	0x08003091
 800302c:	08003091 	.word	0x08003091
 8003030:	08003091 	.word	0x08003091
 8003034:	08003091 	.word	0x08003091
 8003038:	08003091 	.word	0x08003091
 800303c:	08003081 	.word	0x08003081
 8003040:	08003091 	.word	0x08003091
 8003044:	08003091 	.word	0x08003091
 8003048:	08003091 	.word	0x08003091
 800304c:	08003091 	.word	0x08003091
 8003050:	08003091 	.word	0x08003091
 8003054:	08003091 	.word	0x08003091
 8003058:	08003091 	.word	0x08003091
 800305c:	08003089 	.word	0x08003089
 8003060:	2301      	movs	r3, #1
 8003062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003066:	e0d6      	b.n	8003216 <UART_SetConfig+0x7ae>
 8003068:	2304      	movs	r3, #4
 800306a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800306e:	e0d2      	b.n	8003216 <UART_SetConfig+0x7ae>
 8003070:	2308      	movs	r3, #8
 8003072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003076:	e0ce      	b.n	8003216 <UART_SetConfig+0x7ae>
 8003078:	2310      	movs	r3, #16
 800307a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800307e:	e0ca      	b.n	8003216 <UART_SetConfig+0x7ae>
 8003080:	2320      	movs	r3, #32
 8003082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003086:	e0c6      	b.n	8003216 <UART_SetConfig+0x7ae>
 8003088:	2340      	movs	r3, #64	@ 0x40
 800308a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800308e:	e0c2      	b.n	8003216 <UART_SetConfig+0x7ae>
 8003090:	2380      	movs	r3, #128	@ 0x80
 8003092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003096:	e0be      	b.n	8003216 <UART_SetConfig+0x7ae>
 8003098:	40011400 	.word	0x40011400
 800309c:	58024400 	.word	0x58024400
 80030a0:	40007800 	.word	0x40007800
 80030a4:	40007c00 	.word	0x40007c00
 80030a8:	40011800 	.word	0x40011800
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4aad      	ldr	r2, [pc, #692]	@ (8003368 <UART_SetConfig+0x900>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d176      	bne.n	80031a4 <UART_SetConfig+0x73c>
 80030b6:	4bad      	ldr	r3, [pc, #692]	@ (800336c <UART_SetConfig+0x904>)
 80030b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030be:	2b28      	cmp	r3, #40	@ 0x28
 80030c0:	d86c      	bhi.n	800319c <UART_SetConfig+0x734>
 80030c2:	a201      	add	r2, pc, #4	@ (adr r2, 80030c8 <UART_SetConfig+0x660>)
 80030c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c8:	0800316d 	.word	0x0800316d
 80030cc:	0800319d 	.word	0x0800319d
 80030d0:	0800319d 	.word	0x0800319d
 80030d4:	0800319d 	.word	0x0800319d
 80030d8:	0800319d 	.word	0x0800319d
 80030dc:	0800319d 	.word	0x0800319d
 80030e0:	0800319d 	.word	0x0800319d
 80030e4:	0800319d 	.word	0x0800319d
 80030e8:	08003175 	.word	0x08003175
 80030ec:	0800319d 	.word	0x0800319d
 80030f0:	0800319d 	.word	0x0800319d
 80030f4:	0800319d 	.word	0x0800319d
 80030f8:	0800319d 	.word	0x0800319d
 80030fc:	0800319d 	.word	0x0800319d
 8003100:	0800319d 	.word	0x0800319d
 8003104:	0800319d 	.word	0x0800319d
 8003108:	0800317d 	.word	0x0800317d
 800310c:	0800319d 	.word	0x0800319d
 8003110:	0800319d 	.word	0x0800319d
 8003114:	0800319d 	.word	0x0800319d
 8003118:	0800319d 	.word	0x0800319d
 800311c:	0800319d 	.word	0x0800319d
 8003120:	0800319d 	.word	0x0800319d
 8003124:	0800319d 	.word	0x0800319d
 8003128:	08003185 	.word	0x08003185
 800312c:	0800319d 	.word	0x0800319d
 8003130:	0800319d 	.word	0x0800319d
 8003134:	0800319d 	.word	0x0800319d
 8003138:	0800319d 	.word	0x0800319d
 800313c:	0800319d 	.word	0x0800319d
 8003140:	0800319d 	.word	0x0800319d
 8003144:	0800319d 	.word	0x0800319d
 8003148:	0800318d 	.word	0x0800318d
 800314c:	0800319d 	.word	0x0800319d
 8003150:	0800319d 	.word	0x0800319d
 8003154:	0800319d 	.word	0x0800319d
 8003158:	0800319d 	.word	0x0800319d
 800315c:	0800319d 	.word	0x0800319d
 8003160:	0800319d 	.word	0x0800319d
 8003164:	0800319d 	.word	0x0800319d
 8003168:	08003195 	.word	0x08003195
 800316c:	2301      	movs	r3, #1
 800316e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003172:	e050      	b.n	8003216 <UART_SetConfig+0x7ae>
 8003174:	2304      	movs	r3, #4
 8003176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800317a:	e04c      	b.n	8003216 <UART_SetConfig+0x7ae>
 800317c:	2308      	movs	r3, #8
 800317e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003182:	e048      	b.n	8003216 <UART_SetConfig+0x7ae>
 8003184:	2310      	movs	r3, #16
 8003186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800318a:	e044      	b.n	8003216 <UART_SetConfig+0x7ae>
 800318c:	2320      	movs	r3, #32
 800318e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003192:	e040      	b.n	8003216 <UART_SetConfig+0x7ae>
 8003194:	2340      	movs	r3, #64	@ 0x40
 8003196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800319a:	e03c      	b.n	8003216 <UART_SetConfig+0x7ae>
 800319c:	2380      	movs	r3, #128	@ 0x80
 800319e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031a2:	e038      	b.n	8003216 <UART_SetConfig+0x7ae>
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a71      	ldr	r2, [pc, #452]	@ (8003370 <UART_SetConfig+0x908>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d130      	bne.n	8003210 <UART_SetConfig+0x7a8>
 80031ae:	4b6f      	ldr	r3, [pc, #444]	@ (800336c <UART_SetConfig+0x904>)
 80031b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	2b05      	cmp	r3, #5
 80031b8:	d826      	bhi.n	8003208 <UART_SetConfig+0x7a0>
 80031ba:	a201      	add	r2, pc, #4	@ (adr r2, 80031c0 <UART_SetConfig+0x758>)
 80031bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c0:	080031d9 	.word	0x080031d9
 80031c4:	080031e1 	.word	0x080031e1
 80031c8:	080031e9 	.word	0x080031e9
 80031cc:	080031f1 	.word	0x080031f1
 80031d0:	080031f9 	.word	0x080031f9
 80031d4:	08003201 	.word	0x08003201
 80031d8:	2302      	movs	r3, #2
 80031da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031de:	e01a      	b.n	8003216 <UART_SetConfig+0x7ae>
 80031e0:	2304      	movs	r3, #4
 80031e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031e6:	e016      	b.n	8003216 <UART_SetConfig+0x7ae>
 80031e8:	2308      	movs	r3, #8
 80031ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031ee:	e012      	b.n	8003216 <UART_SetConfig+0x7ae>
 80031f0:	2310      	movs	r3, #16
 80031f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031f6:	e00e      	b.n	8003216 <UART_SetConfig+0x7ae>
 80031f8:	2320      	movs	r3, #32
 80031fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031fe:	e00a      	b.n	8003216 <UART_SetConfig+0x7ae>
 8003200:	2340      	movs	r3, #64	@ 0x40
 8003202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003206:	e006      	b.n	8003216 <UART_SetConfig+0x7ae>
 8003208:	2380      	movs	r3, #128	@ 0x80
 800320a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800320e:	e002      	b.n	8003216 <UART_SetConfig+0x7ae>
 8003210:	2380      	movs	r3, #128	@ 0x80
 8003212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a55      	ldr	r2, [pc, #340]	@ (8003370 <UART_SetConfig+0x908>)
 800321c:	4293      	cmp	r3, r2
 800321e:	f040 80f8 	bne.w	8003412 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003222:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003226:	2b20      	cmp	r3, #32
 8003228:	dc46      	bgt.n	80032b8 <UART_SetConfig+0x850>
 800322a:	2b02      	cmp	r3, #2
 800322c:	db75      	blt.n	800331a <UART_SetConfig+0x8b2>
 800322e:	3b02      	subs	r3, #2
 8003230:	2b1e      	cmp	r3, #30
 8003232:	d872      	bhi.n	800331a <UART_SetConfig+0x8b2>
 8003234:	a201      	add	r2, pc, #4	@ (adr r2, 800323c <UART_SetConfig+0x7d4>)
 8003236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323a:	bf00      	nop
 800323c:	080032bf 	.word	0x080032bf
 8003240:	0800331b 	.word	0x0800331b
 8003244:	080032c7 	.word	0x080032c7
 8003248:	0800331b 	.word	0x0800331b
 800324c:	0800331b 	.word	0x0800331b
 8003250:	0800331b 	.word	0x0800331b
 8003254:	080032d7 	.word	0x080032d7
 8003258:	0800331b 	.word	0x0800331b
 800325c:	0800331b 	.word	0x0800331b
 8003260:	0800331b 	.word	0x0800331b
 8003264:	0800331b 	.word	0x0800331b
 8003268:	0800331b 	.word	0x0800331b
 800326c:	0800331b 	.word	0x0800331b
 8003270:	0800331b 	.word	0x0800331b
 8003274:	080032e7 	.word	0x080032e7
 8003278:	0800331b 	.word	0x0800331b
 800327c:	0800331b 	.word	0x0800331b
 8003280:	0800331b 	.word	0x0800331b
 8003284:	0800331b 	.word	0x0800331b
 8003288:	0800331b 	.word	0x0800331b
 800328c:	0800331b 	.word	0x0800331b
 8003290:	0800331b 	.word	0x0800331b
 8003294:	0800331b 	.word	0x0800331b
 8003298:	0800331b 	.word	0x0800331b
 800329c:	0800331b 	.word	0x0800331b
 80032a0:	0800331b 	.word	0x0800331b
 80032a4:	0800331b 	.word	0x0800331b
 80032a8:	0800331b 	.word	0x0800331b
 80032ac:	0800331b 	.word	0x0800331b
 80032b0:	0800331b 	.word	0x0800331b
 80032b4:	0800330d 	.word	0x0800330d
 80032b8:	2b40      	cmp	r3, #64	@ 0x40
 80032ba:	d02a      	beq.n	8003312 <UART_SetConfig+0x8aa>
 80032bc:	e02d      	b.n	800331a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80032be:	f7ff f837 	bl	8002330 <HAL_RCCEx_GetD3PCLK1Freq>
 80032c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80032c4:	e02f      	b.n	8003326 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80032c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff f846 	bl	800235c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80032d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80032d4:	e027      	b.n	8003326 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80032d6:	f107 0318 	add.w	r3, r7, #24
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff f992 	bl	8002604 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80032e4:	e01f      	b.n	8003326 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032e6:	4b21      	ldr	r3, [pc, #132]	@ (800336c <UART_SetConfig+0x904>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d009      	beq.n	8003306 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80032f2:	4b1e      	ldr	r3, [pc, #120]	@ (800336c <UART_SetConfig+0x904>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	08db      	lsrs	r3, r3, #3
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003374 <UART_SetConfig+0x90c>)
 80032fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003304:	e00f      	b.n	8003326 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8003306:	4b1b      	ldr	r3, [pc, #108]	@ (8003374 <UART_SetConfig+0x90c>)
 8003308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800330a:	e00c      	b.n	8003326 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800330c:	4b1a      	ldr	r3, [pc, #104]	@ (8003378 <UART_SetConfig+0x910>)
 800330e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003310:	e009      	b.n	8003326 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003318:	e005      	b.n	8003326 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003324:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 81ee 	beq.w	800370a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003332:	4a12      	ldr	r2, [pc, #72]	@ (800337c <UART_SetConfig+0x914>)
 8003334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003338:	461a      	mov	r2, r3
 800333a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800333c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003340:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4413      	add	r3, r2
 800334c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800334e:	429a      	cmp	r2, r3
 8003350:	d305      	bcc.n	800335e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003358:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800335a:	429a      	cmp	r2, r3
 800335c:	d910      	bls.n	8003380 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003364:	e1d1      	b.n	800370a <UART_SetConfig+0xca2>
 8003366:	bf00      	nop
 8003368:	40011c00 	.word	0x40011c00
 800336c:	58024400 	.word	0x58024400
 8003370:	58000c00 	.word	0x58000c00
 8003374:	03d09000 	.word	0x03d09000
 8003378:	003d0900 	.word	0x003d0900
 800337c:	080045c0 	.word	0x080045c0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003382:	2200      	movs	r2, #0
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	60fa      	str	r2, [r7, #12]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338c:	4ac0      	ldr	r2, [pc, #768]	@ (8003690 <UART_SetConfig+0xc28>)
 800338e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003392:	b29b      	uxth	r3, r3
 8003394:	2200      	movs	r2, #0
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	607a      	str	r2, [r7, #4]
 800339a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800339e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033a2:	f7fd f80d 	bl	80003c0 <__aeabi_uldivmod>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4610      	mov	r0, r2
 80033ac:	4619      	mov	r1, r3
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	020b      	lsls	r3, r1, #8
 80033b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80033bc:	0202      	lsls	r2, r0, #8
 80033be:	6979      	ldr	r1, [r7, #20]
 80033c0:	6849      	ldr	r1, [r1, #4]
 80033c2:	0849      	lsrs	r1, r1, #1
 80033c4:	2000      	movs	r0, #0
 80033c6:	460c      	mov	r4, r1
 80033c8:	4605      	mov	r5, r0
 80033ca:	eb12 0804 	adds.w	r8, r2, r4
 80033ce:	eb43 0905 	adc.w	r9, r3, r5
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	469a      	mov	sl, r3
 80033da:	4693      	mov	fp, r2
 80033dc:	4652      	mov	r2, sl
 80033de:	465b      	mov	r3, fp
 80033e0:	4640      	mov	r0, r8
 80033e2:	4649      	mov	r1, r9
 80033e4:	f7fc ffec 	bl	80003c0 <__aeabi_uldivmod>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4613      	mov	r3, r2
 80033ee:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033f6:	d308      	bcc.n	800340a <UART_SetConfig+0x9a2>
 80033f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033fe:	d204      	bcs.n	800340a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003406:	60da      	str	r2, [r3, #12]
 8003408:	e17f      	b.n	800370a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003410:	e17b      	b.n	800370a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800341a:	f040 80bd 	bne.w	8003598 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800341e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003422:	2b20      	cmp	r3, #32
 8003424:	dc48      	bgt.n	80034b8 <UART_SetConfig+0xa50>
 8003426:	2b00      	cmp	r3, #0
 8003428:	db7b      	blt.n	8003522 <UART_SetConfig+0xaba>
 800342a:	2b20      	cmp	r3, #32
 800342c:	d879      	bhi.n	8003522 <UART_SetConfig+0xaba>
 800342e:	a201      	add	r2, pc, #4	@ (adr r2, 8003434 <UART_SetConfig+0x9cc>)
 8003430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003434:	080034bf 	.word	0x080034bf
 8003438:	080034c7 	.word	0x080034c7
 800343c:	08003523 	.word	0x08003523
 8003440:	08003523 	.word	0x08003523
 8003444:	080034cf 	.word	0x080034cf
 8003448:	08003523 	.word	0x08003523
 800344c:	08003523 	.word	0x08003523
 8003450:	08003523 	.word	0x08003523
 8003454:	080034df 	.word	0x080034df
 8003458:	08003523 	.word	0x08003523
 800345c:	08003523 	.word	0x08003523
 8003460:	08003523 	.word	0x08003523
 8003464:	08003523 	.word	0x08003523
 8003468:	08003523 	.word	0x08003523
 800346c:	08003523 	.word	0x08003523
 8003470:	08003523 	.word	0x08003523
 8003474:	080034ef 	.word	0x080034ef
 8003478:	08003523 	.word	0x08003523
 800347c:	08003523 	.word	0x08003523
 8003480:	08003523 	.word	0x08003523
 8003484:	08003523 	.word	0x08003523
 8003488:	08003523 	.word	0x08003523
 800348c:	08003523 	.word	0x08003523
 8003490:	08003523 	.word	0x08003523
 8003494:	08003523 	.word	0x08003523
 8003498:	08003523 	.word	0x08003523
 800349c:	08003523 	.word	0x08003523
 80034a0:	08003523 	.word	0x08003523
 80034a4:	08003523 	.word	0x08003523
 80034a8:	08003523 	.word	0x08003523
 80034ac:	08003523 	.word	0x08003523
 80034b0:	08003523 	.word	0x08003523
 80034b4:	08003515 	.word	0x08003515
 80034b8:	2b40      	cmp	r3, #64	@ 0x40
 80034ba:	d02e      	beq.n	800351a <UART_SetConfig+0xab2>
 80034bc:	e031      	b.n	8003522 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034be:	f7fe fef5 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 80034c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80034c4:	e033      	b.n	800352e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034c6:	f7fe ff07 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 80034ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80034cc:	e02f      	b.n	800352e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80034ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fe ff42 	bl	800235c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80034d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80034dc:	e027      	b.n	800352e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80034de:	f107 0318 	add.w	r3, r7, #24
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff f88e 	bl	8002604 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80034ec:	e01f      	b.n	800352e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034ee:	4b69      	ldr	r3, [pc, #420]	@ (8003694 <UART_SetConfig+0xc2c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d009      	beq.n	800350e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80034fa:	4b66      	ldr	r3, [pc, #408]	@ (8003694 <UART_SetConfig+0xc2c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	08db      	lsrs	r3, r3, #3
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	4a64      	ldr	r2, [pc, #400]	@ (8003698 <UART_SetConfig+0xc30>)
 8003506:	fa22 f303 	lsr.w	r3, r2, r3
 800350a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800350c:	e00f      	b.n	800352e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800350e:	4b62      	ldr	r3, [pc, #392]	@ (8003698 <UART_SetConfig+0xc30>)
 8003510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003512:	e00c      	b.n	800352e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003514:	4b61      	ldr	r3, [pc, #388]	@ (800369c <UART_SetConfig+0xc34>)
 8003516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003518:	e009      	b.n	800352e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800351a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800351e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003520:	e005      	b.n	800352e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800352c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800352e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 80ea 	beq.w	800370a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353a:	4a55      	ldr	r2, [pc, #340]	@ (8003690 <UART_SetConfig+0xc28>)
 800353c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003540:	461a      	mov	r2, r3
 8003542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003544:	fbb3 f3f2 	udiv	r3, r3, r2
 8003548:	005a      	lsls	r2, r3, #1
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	085b      	lsrs	r3, r3, #1
 8003550:	441a      	add	r2, r3
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	fbb2 f3f3 	udiv	r3, r2, r3
 800355a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800355c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800355e:	2b0f      	cmp	r3, #15
 8003560:	d916      	bls.n	8003590 <UART_SetConfig+0xb28>
 8003562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003568:	d212      	bcs.n	8003590 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800356a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800356c:	b29b      	uxth	r3, r3
 800356e:	f023 030f 	bic.w	r3, r3, #15
 8003572:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003576:	085b      	lsrs	r3, r3, #1
 8003578:	b29b      	uxth	r3, r3
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	b29a      	uxth	r2, r3
 8003580:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003582:	4313      	orrs	r3, r2
 8003584:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	e0bc      	b.n	800370a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003596:	e0b8      	b.n	800370a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003598:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800359c:	2b20      	cmp	r3, #32
 800359e:	dc4b      	bgt.n	8003638 <UART_SetConfig+0xbd0>
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f2c0 8087 	blt.w	80036b4 <UART_SetConfig+0xc4c>
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	f200 8084 	bhi.w	80036b4 <UART_SetConfig+0xc4c>
 80035ac:	a201      	add	r2, pc, #4	@ (adr r2, 80035b4 <UART_SetConfig+0xb4c>)
 80035ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b2:	bf00      	nop
 80035b4:	0800363f 	.word	0x0800363f
 80035b8:	08003647 	.word	0x08003647
 80035bc:	080036b5 	.word	0x080036b5
 80035c0:	080036b5 	.word	0x080036b5
 80035c4:	0800364f 	.word	0x0800364f
 80035c8:	080036b5 	.word	0x080036b5
 80035cc:	080036b5 	.word	0x080036b5
 80035d0:	080036b5 	.word	0x080036b5
 80035d4:	0800365f 	.word	0x0800365f
 80035d8:	080036b5 	.word	0x080036b5
 80035dc:	080036b5 	.word	0x080036b5
 80035e0:	080036b5 	.word	0x080036b5
 80035e4:	080036b5 	.word	0x080036b5
 80035e8:	080036b5 	.word	0x080036b5
 80035ec:	080036b5 	.word	0x080036b5
 80035f0:	080036b5 	.word	0x080036b5
 80035f4:	0800366f 	.word	0x0800366f
 80035f8:	080036b5 	.word	0x080036b5
 80035fc:	080036b5 	.word	0x080036b5
 8003600:	080036b5 	.word	0x080036b5
 8003604:	080036b5 	.word	0x080036b5
 8003608:	080036b5 	.word	0x080036b5
 800360c:	080036b5 	.word	0x080036b5
 8003610:	080036b5 	.word	0x080036b5
 8003614:	080036b5 	.word	0x080036b5
 8003618:	080036b5 	.word	0x080036b5
 800361c:	080036b5 	.word	0x080036b5
 8003620:	080036b5 	.word	0x080036b5
 8003624:	080036b5 	.word	0x080036b5
 8003628:	080036b5 	.word	0x080036b5
 800362c:	080036b5 	.word	0x080036b5
 8003630:	080036b5 	.word	0x080036b5
 8003634:	080036a7 	.word	0x080036a7
 8003638:	2b40      	cmp	r3, #64	@ 0x40
 800363a:	d037      	beq.n	80036ac <UART_SetConfig+0xc44>
 800363c:	e03a      	b.n	80036b4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800363e:	f7fe fe35 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 8003642:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003644:	e03c      	b.n	80036c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003646:	f7fe fe47 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 800364a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800364c:	e038      	b.n	80036c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800364e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe fe82 	bl	800235c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800365c:	e030      	b.n	80036c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800365e:	f107 0318 	add.w	r3, r7, #24
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe ffce 	bl	8002604 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800366c:	e028      	b.n	80036c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800366e:	4b09      	ldr	r3, [pc, #36]	@ (8003694 <UART_SetConfig+0xc2c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d012      	beq.n	80036a0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800367a:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <UART_SetConfig+0xc2c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	08db      	lsrs	r3, r3, #3
 8003680:	f003 0303 	and.w	r3, r3, #3
 8003684:	4a04      	ldr	r2, [pc, #16]	@ (8003698 <UART_SetConfig+0xc30>)
 8003686:	fa22 f303 	lsr.w	r3, r2, r3
 800368a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800368c:	e018      	b.n	80036c0 <UART_SetConfig+0xc58>
 800368e:	bf00      	nop
 8003690:	080045c0 	.word	0x080045c0
 8003694:	58024400 	.word	0x58024400
 8003698:	03d09000 	.word	0x03d09000
 800369c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80036a0:	4b24      	ldr	r3, [pc, #144]	@ (8003734 <UART_SetConfig+0xccc>)
 80036a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80036a4:	e00c      	b.n	80036c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80036a6:	4b24      	ldr	r3, [pc, #144]	@ (8003738 <UART_SetConfig+0xcd0>)
 80036a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80036aa:	e009      	b.n	80036c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80036b2:	e005      	b.n	80036c0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80036be:	bf00      	nop
    }

    if (pclk != 0U)
 80036c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d021      	beq.n	800370a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ca:	4a1c      	ldr	r2, [pc, #112]	@ (800373c <UART_SetConfig+0xcd4>)
 80036cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036d0:	461a      	mov	r2, r3
 80036d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	085b      	lsrs	r3, r3, #1
 80036de:	441a      	add	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ec:	2b0f      	cmp	r3, #15
 80036ee:	d909      	bls.n	8003704 <UART_SetConfig+0xc9c>
 80036f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036f6:	d205      	bcs.n	8003704 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	60da      	str	r2, [r3, #12]
 8003702:	e002      	b.n	800370a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2201      	movs	r2, #1
 800370e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2201      	movs	r2, #1
 8003716:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2200      	movs	r2, #0
 800371e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2200      	movs	r2, #0
 8003724:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003726:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800372a:	4618      	mov	r0, r3
 800372c:	3748      	adds	r7, #72	@ 0x48
 800372e:	46bd      	mov	sp, r7
 8003730:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003734:	03d09000 	.word	0x03d09000
 8003738:	003d0900 	.word	0x003d0900
 800373c:	080045c0 	.word	0x080045c0

08003740 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d4:	f003 0310 	and.w	r3, r3, #16
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01a      	beq.n	8003856 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800383e:	d10a      	bne.n	8003856 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	605a      	str	r2, [r3, #4]
  }
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b098      	sub	sp, #96	@ 0x60
 8003888:	af02      	add	r7, sp, #8
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003894:	f7fd fae2 	bl	8000e5c <HAL_GetTick>
 8003898:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d12f      	bne.n	8003908 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b0:	2200      	movs	r2, #0
 80038b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f88e 	bl	80039d8 <UART_WaitOnFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d022      	beq.n	8003908 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ca:	e853 3f00 	ldrex	r3, [r3]
 80038ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80038e2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038e8:	e841 2300 	strex	r3, r2, [r1]
 80038ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1e6      	bne.n	80038c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e063      	b.n	80039d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	2b04      	cmp	r3, #4
 8003914:	d149      	bne.n	80039aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003916:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800391e:	2200      	movs	r2, #0
 8003920:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f857 	bl	80039d8 <UART_WaitOnFlagUntilTimeout>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d03c      	beq.n	80039aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003938:	e853 3f00 	ldrex	r3, [r3]
 800393c:	623b      	str	r3, [r7, #32]
   return(result);
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003944:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800394e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003950:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003952:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003954:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003956:	e841 2300 	strex	r3, r2, [r1]
 800395a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800395c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1e6      	bne.n	8003930 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3308      	adds	r3, #8
 8003968:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	e853 3f00 	ldrex	r3, [r3]
 8003970:	60fb      	str	r3, [r7, #12]
   return(result);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	64bb      	str	r3, [r7, #72]	@ 0x48
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	3308      	adds	r3, #8
 8003980:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003982:	61fa      	str	r2, [r7, #28]
 8003984:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003986:	69b9      	ldr	r1, [r7, #24]
 8003988:	69fa      	ldr	r2, [r7, #28]
 800398a:	e841 2300 	strex	r3, r2, [r1]
 800398e:	617b      	str	r3, [r7, #20]
   return(result);
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1e5      	bne.n	8003962 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e012      	b.n	80039d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3758      	adds	r7, #88	@ 0x58
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	4613      	mov	r3, r2
 80039e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e8:	e04f      	b.n	8003a8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f0:	d04b      	beq.n	8003a8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f2:	f7fd fa33 	bl	8000e5c <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d302      	bcc.n	8003a08 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e04e      	b.n	8003aaa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d037      	beq.n	8003a8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2b80      	cmp	r3, #128	@ 0x80
 8003a1e:	d034      	beq.n	8003a8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b40      	cmp	r3, #64	@ 0x40
 8003a24:	d031      	beq.n	8003a8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d110      	bne.n	8003a56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2208      	movs	r2, #8
 8003a3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f839 	bl	8003ab4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2208      	movs	r2, #8
 8003a46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e029      	b.n	8003aaa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a64:	d111      	bne.n	8003a8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f81f 	bl	8003ab4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e00f      	b.n	8003aaa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69da      	ldr	r2, [r3, #28]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4013      	ands	r3, r2
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	bf0c      	ite	eq
 8003a9a:	2301      	moveq	r3, #1
 8003a9c:	2300      	movne	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d0a0      	beq.n	80039ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b095      	sub	sp, #84	@ 0x54
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003acc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ada:	643b      	str	r3, [r7, #64]	@ 0x40
 8003adc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ade:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ae0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ae2:	e841 2300 	strex	r3, r2, [r1]
 8003ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1e6      	bne.n	8003abc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3308      	adds	r3, #8
 8003af4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	e853 3f00 	ldrex	r3, [r3]
 8003afc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	4b1e      	ldr	r3, [pc, #120]	@ (8003b7c <UART_EndRxTransfer+0xc8>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	3308      	adds	r3, #8
 8003b0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b16:	e841 2300 	strex	r3, r2, [r1]
 8003b1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1e5      	bne.n	8003aee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d118      	bne.n	8003b5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f023 0310 	bic.w	r3, r3, #16
 8003b3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b48:	61bb      	str	r3, [r7, #24]
 8003b4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	6979      	ldr	r1, [r7, #20]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	e841 2300 	strex	r3, r2, [r1]
 8003b54:	613b      	str	r3, [r7, #16]
   return(result);
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e6      	bne.n	8003b2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003b70:	bf00      	nop
 8003b72:	3754      	adds	r7, #84	@ 0x54
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	effffffe 	.word	0xeffffffe

08003b80 <siprintf>:
 8003b80:	b40e      	push	{r1, r2, r3}
 8003b82:	b510      	push	{r4, lr}
 8003b84:	b09d      	sub	sp, #116	@ 0x74
 8003b86:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003b88:	9002      	str	r0, [sp, #8]
 8003b8a:	9006      	str	r0, [sp, #24]
 8003b8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003b90:	480a      	ldr	r0, [pc, #40]	@ (8003bbc <siprintf+0x3c>)
 8003b92:	9107      	str	r1, [sp, #28]
 8003b94:	9104      	str	r1, [sp, #16]
 8003b96:	490a      	ldr	r1, [pc, #40]	@ (8003bc0 <siprintf+0x40>)
 8003b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b9c:	9105      	str	r1, [sp, #20]
 8003b9e:	2400      	movs	r4, #0
 8003ba0:	a902      	add	r1, sp, #8
 8003ba2:	6800      	ldr	r0, [r0, #0]
 8003ba4:	9301      	str	r3, [sp, #4]
 8003ba6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003ba8:	f000 f994 	bl	8003ed4 <_svfiprintf_r>
 8003bac:	9b02      	ldr	r3, [sp, #8]
 8003bae:	701c      	strb	r4, [r3, #0]
 8003bb0:	b01d      	add	sp, #116	@ 0x74
 8003bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bb6:	b003      	add	sp, #12
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	24000010 	.word	0x24000010
 8003bc0:	ffff0208 	.word	0xffff0208

08003bc4 <memset>:
 8003bc4:	4402      	add	r2, r0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d100      	bne.n	8003bce <memset+0xa>
 8003bcc:	4770      	bx	lr
 8003bce:	f803 1b01 	strb.w	r1, [r3], #1
 8003bd2:	e7f9      	b.n	8003bc8 <memset+0x4>

08003bd4 <__errno>:
 8003bd4:	4b01      	ldr	r3, [pc, #4]	@ (8003bdc <__errno+0x8>)
 8003bd6:	6818      	ldr	r0, [r3, #0]
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	24000010 	.word	0x24000010

08003be0 <__libc_init_array>:
 8003be0:	b570      	push	{r4, r5, r6, lr}
 8003be2:	4d0d      	ldr	r5, [pc, #52]	@ (8003c18 <__libc_init_array+0x38>)
 8003be4:	4c0d      	ldr	r4, [pc, #52]	@ (8003c1c <__libc_init_array+0x3c>)
 8003be6:	1b64      	subs	r4, r4, r5
 8003be8:	10a4      	asrs	r4, r4, #2
 8003bea:	2600      	movs	r6, #0
 8003bec:	42a6      	cmp	r6, r4
 8003bee:	d109      	bne.n	8003c04 <__libc_init_array+0x24>
 8003bf0:	4d0b      	ldr	r5, [pc, #44]	@ (8003c20 <__libc_init_array+0x40>)
 8003bf2:	4c0c      	ldr	r4, [pc, #48]	@ (8003c24 <__libc_init_array+0x44>)
 8003bf4:	f000 fc64 	bl	80044c0 <_init>
 8003bf8:	1b64      	subs	r4, r4, r5
 8003bfa:	10a4      	asrs	r4, r4, #2
 8003bfc:	2600      	movs	r6, #0
 8003bfe:	42a6      	cmp	r6, r4
 8003c00:	d105      	bne.n	8003c0e <__libc_init_array+0x2e>
 8003c02:	bd70      	pop	{r4, r5, r6, pc}
 8003c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c08:	4798      	blx	r3
 8003c0a:	3601      	adds	r6, #1
 8003c0c:	e7ee      	b.n	8003bec <__libc_init_array+0xc>
 8003c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c12:	4798      	blx	r3
 8003c14:	3601      	adds	r6, #1
 8003c16:	e7f2      	b.n	8003bfe <__libc_init_array+0x1e>
 8003c18:	08004614 	.word	0x08004614
 8003c1c:	08004614 	.word	0x08004614
 8003c20:	08004614 	.word	0x08004614
 8003c24:	08004618 	.word	0x08004618

08003c28 <__retarget_lock_acquire_recursive>:
 8003c28:	4770      	bx	lr

08003c2a <__retarget_lock_release_recursive>:
 8003c2a:	4770      	bx	lr

08003c2c <_free_r>:
 8003c2c:	b538      	push	{r3, r4, r5, lr}
 8003c2e:	4605      	mov	r5, r0
 8003c30:	2900      	cmp	r1, #0
 8003c32:	d041      	beq.n	8003cb8 <_free_r+0x8c>
 8003c34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c38:	1f0c      	subs	r4, r1, #4
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	bfb8      	it	lt
 8003c3e:	18e4      	addlt	r4, r4, r3
 8003c40:	f000 f8e0 	bl	8003e04 <__malloc_lock>
 8003c44:	4a1d      	ldr	r2, [pc, #116]	@ (8003cbc <_free_r+0x90>)
 8003c46:	6813      	ldr	r3, [r2, #0]
 8003c48:	b933      	cbnz	r3, 8003c58 <_free_r+0x2c>
 8003c4a:	6063      	str	r3, [r4, #4]
 8003c4c:	6014      	str	r4, [r2, #0]
 8003c4e:	4628      	mov	r0, r5
 8003c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c54:	f000 b8dc 	b.w	8003e10 <__malloc_unlock>
 8003c58:	42a3      	cmp	r3, r4
 8003c5a:	d908      	bls.n	8003c6e <_free_r+0x42>
 8003c5c:	6820      	ldr	r0, [r4, #0]
 8003c5e:	1821      	adds	r1, r4, r0
 8003c60:	428b      	cmp	r3, r1
 8003c62:	bf01      	itttt	eq
 8003c64:	6819      	ldreq	r1, [r3, #0]
 8003c66:	685b      	ldreq	r3, [r3, #4]
 8003c68:	1809      	addeq	r1, r1, r0
 8003c6a:	6021      	streq	r1, [r4, #0]
 8003c6c:	e7ed      	b.n	8003c4a <_free_r+0x1e>
 8003c6e:	461a      	mov	r2, r3
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	b10b      	cbz	r3, 8003c78 <_free_r+0x4c>
 8003c74:	42a3      	cmp	r3, r4
 8003c76:	d9fa      	bls.n	8003c6e <_free_r+0x42>
 8003c78:	6811      	ldr	r1, [r2, #0]
 8003c7a:	1850      	adds	r0, r2, r1
 8003c7c:	42a0      	cmp	r0, r4
 8003c7e:	d10b      	bne.n	8003c98 <_free_r+0x6c>
 8003c80:	6820      	ldr	r0, [r4, #0]
 8003c82:	4401      	add	r1, r0
 8003c84:	1850      	adds	r0, r2, r1
 8003c86:	4283      	cmp	r3, r0
 8003c88:	6011      	str	r1, [r2, #0]
 8003c8a:	d1e0      	bne.n	8003c4e <_free_r+0x22>
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	6053      	str	r3, [r2, #4]
 8003c92:	4408      	add	r0, r1
 8003c94:	6010      	str	r0, [r2, #0]
 8003c96:	e7da      	b.n	8003c4e <_free_r+0x22>
 8003c98:	d902      	bls.n	8003ca0 <_free_r+0x74>
 8003c9a:	230c      	movs	r3, #12
 8003c9c:	602b      	str	r3, [r5, #0]
 8003c9e:	e7d6      	b.n	8003c4e <_free_r+0x22>
 8003ca0:	6820      	ldr	r0, [r4, #0]
 8003ca2:	1821      	adds	r1, r4, r0
 8003ca4:	428b      	cmp	r3, r1
 8003ca6:	bf04      	itt	eq
 8003ca8:	6819      	ldreq	r1, [r3, #0]
 8003caa:	685b      	ldreq	r3, [r3, #4]
 8003cac:	6063      	str	r3, [r4, #4]
 8003cae:	bf04      	itt	eq
 8003cb0:	1809      	addeq	r1, r1, r0
 8003cb2:	6021      	streq	r1, [r4, #0]
 8003cb4:	6054      	str	r4, [r2, #4]
 8003cb6:	e7ca      	b.n	8003c4e <_free_r+0x22>
 8003cb8:	bd38      	pop	{r3, r4, r5, pc}
 8003cba:	bf00      	nop
 8003cbc:	2400032c 	.word	0x2400032c

08003cc0 <sbrk_aligned>:
 8003cc0:	b570      	push	{r4, r5, r6, lr}
 8003cc2:	4e0f      	ldr	r6, [pc, #60]	@ (8003d00 <sbrk_aligned+0x40>)
 8003cc4:	460c      	mov	r4, r1
 8003cc6:	6831      	ldr	r1, [r6, #0]
 8003cc8:	4605      	mov	r5, r0
 8003cca:	b911      	cbnz	r1, 8003cd2 <sbrk_aligned+0x12>
 8003ccc:	f000 fba4 	bl	8004418 <_sbrk_r>
 8003cd0:	6030      	str	r0, [r6, #0]
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	f000 fb9f 	bl	8004418 <_sbrk_r>
 8003cda:	1c43      	adds	r3, r0, #1
 8003cdc:	d103      	bne.n	8003ce6 <sbrk_aligned+0x26>
 8003cde:	f04f 34ff 	mov.w	r4, #4294967295
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	bd70      	pop	{r4, r5, r6, pc}
 8003ce6:	1cc4      	adds	r4, r0, #3
 8003ce8:	f024 0403 	bic.w	r4, r4, #3
 8003cec:	42a0      	cmp	r0, r4
 8003cee:	d0f8      	beq.n	8003ce2 <sbrk_aligned+0x22>
 8003cf0:	1a21      	subs	r1, r4, r0
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	f000 fb90 	bl	8004418 <_sbrk_r>
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	d1f2      	bne.n	8003ce2 <sbrk_aligned+0x22>
 8003cfc:	e7ef      	b.n	8003cde <sbrk_aligned+0x1e>
 8003cfe:	bf00      	nop
 8003d00:	24000328 	.word	0x24000328

08003d04 <_malloc_r>:
 8003d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d08:	1ccd      	adds	r5, r1, #3
 8003d0a:	f025 0503 	bic.w	r5, r5, #3
 8003d0e:	3508      	adds	r5, #8
 8003d10:	2d0c      	cmp	r5, #12
 8003d12:	bf38      	it	cc
 8003d14:	250c      	movcc	r5, #12
 8003d16:	2d00      	cmp	r5, #0
 8003d18:	4606      	mov	r6, r0
 8003d1a:	db01      	blt.n	8003d20 <_malloc_r+0x1c>
 8003d1c:	42a9      	cmp	r1, r5
 8003d1e:	d904      	bls.n	8003d2a <_malloc_r+0x26>
 8003d20:	230c      	movs	r3, #12
 8003d22:	6033      	str	r3, [r6, #0]
 8003d24:	2000      	movs	r0, #0
 8003d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e00 <_malloc_r+0xfc>
 8003d2e:	f000 f869 	bl	8003e04 <__malloc_lock>
 8003d32:	f8d8 3000 	ldr.w	r3, [r8]
 8003d36:	461c      	mov	r4, r3
 8003d38:	bb44      	cbnz	r4, 8003d8c <_malloc_r+0x88>
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	f7ff ffbf 	bl	8003cc0 <sbrk_aligned>
 8003d42:	1c43      	adds	r3, r0, #1
 8003d44:	4604      	mov	r4, r0
 8003d46:	d158      	bne.n	8003dfa <_malloc_r+0xf6>
 8003d48:	f8d8 4000 	ldr.w	r4, [r8]
 8003d4c:	4627      	mov	r7, r4
 8003d4e:	2f00      	cmp	r7, #0
 8003d50:	d143      	bne.n	8003dda <_malloc_r+0xd6>
 8003d52:	2c00      	cmp	r4, #0
 8003d54:	d04b      	beq.n	8003dee <_malloc_r+0xea>
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	4639      	mov	r1, r7
 8003d5a:	4630      	mov	r0, r6
 8003d5c:	eb04 0903 	add.w	r9, r4, r3
 8003d60:	f000 fb5a 	bl	8004418 <_sbrk_r>
 8003d64:	4581      	cmp	r9, r0
 8003d66:	d142      	bne.n	8003dee <_malloc_r+0xea>
 8003d68:	6821      	ldr	r1, [r4, #0]
 8003d6a:	1a6d      	subs	r5, r5, r1
 8003d6c:	4629      	mov	r1, r5
 8003d6e:	4630      	mov	r0, r6
 8003d70:	f7ff ffa6 	bl	8003cc0 <sbrk_aligned>
 8003d74:	3001      	adds	r0, #1
 8003d76:	d03a      	beq.n	8003dee <_malloc_r+0xea>
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	442b      	add	r3, r5
 8003d7c:	6023      	str	r3, [r4, #0]
 8003d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	bb62      	cbnz	r2, 8003de0 <_malloc_r+0xdc>
 8003d86:	f8c8 7000 	str.w	r7, [r8]
 8003d8a:	e00f      	b.n	8003dac <_malloc_r+0xa8>
 8003d8c:	6822      	ldr	r2, [r4, #0]
 8003d8e:	1b52      	subs	r2, r2, r5
 8003d90:	d420      	bmi.n	8003dd4 <_malloc_r+0xd0>
 8003d92:	2a0b      	cmp	r2, #11
 8003d94:	d917      	bls.n	8003dc6 <_malloc_r+0xc2>
 8003d96:	1961      	adds	r1, r4, r5
 8003d98:	42a3      	cmp	r3, r4
 8003d9a:	6025      	str	r5, [r4, #0]
 8003d9c:	bf18      	it	ne
 8003d9e:	6059      	strne	r1, [r3, #4]
 8003da0:	6863      	ldr	r3, [r4, #4]
 8003da2:	bf08      	it	eq
 8003da4:	f8c8 1000 	streq.w	r1, [r8]
 8003da8:	5162      	str	r2, [r4, r5]
 8003daa:	604b      	str	r3, [r1, #4]
 8003dac:	4630      	mov	r0, r6
 8003dae:	f000 f82f 	bl	8003e10 <__malloc_unlock>
 8003db2:	f104 000b 	add.w	r0, r4, #11
 8003db6:	1d23      	adds	r3, r4, #4
 8003db8:	f020 0007 	bic.w	r0, r0, #7
 8003dbc:	1ac2      	subs	r2, r0, r3
 8003dbe:	bf1c      	itt	ne
 8003dc0:	1a1b      	subne	r3, r3, r0
 8003dc2:	50a3      	strne	r3, [r4, r2]
 8003dc4:	e7af      	b.n	8003d26 <_malloc_r+0x22>
 8003dc6:	6862      	ldr	r2, [r4, #4]
 8003dc8:	42a3      	cmp	r3, r4
 8003dca:	bf0c      	ite	eq
 8003dcc:	f8c8 2000 	streq.w	r2, [r8]
 8003dd0:	605a      	strne	r2, [r3, #4]
 8003dd2:	e7eb      	b.n	8003dac <_malloc_r+0xa8>
 8003dd4:	4623      	mov	r3, r4
 8003dd6:	6864      	ldr	r4, [r4, #4]
 8003dd8:	e7ae      	b.n	8003d38 <_malloc_r+0x34>
 8003dda:	463c      	mov	r4, r7
 8003ddc:	687f      	ldr	r7, [r7, #4]
 8003dde:	e7b6      	b.n	8003d4e <_malloc_r+0x4a>
 8003de0:	461a      	mov	r2, r3
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	42a3      	cmp	r3, r4
 8003de6:	d1fb      	bne.n	8003de0 <_malloc_r+0xdc>
 8003de8:	2300      	movs	r3, #0
 8003dea:	6053      	str	r3, [r2, #4]
 8003dec:	e7de      	b.n	8003dac <_malloc_r+0xa8>
 8003dee:	230c      	movs	r3, #12
 8003df0:	6033      	str	r3, [r6, #0]
 8003df2:	4630      	mov	r0, r6
 8003df4:	f000 f80c 	bl	8003e10 <__malloc_unlock>
 8003df8:	e794      	b.n	8003d24 <_malloc_r+0x20>
 8003dfa:	6005      	str	r5, [r0, #0]
 8003dfc:	e7d6      	b.n	8003dac <_malloc_r+0xa8>
 8003dfe:	bf00      	nop
 8003e00:	2400032c 	.word	0x2400032c

08003e04 <__malloc_lock>:
 8003e04:	4801      	ldr	r0, [pc, #4]	@ (8003e0c <__malloc_lock+0x8>)
 8003e06:	f7ff bf0f 	b.w	8003c28 <__retarget_lock_acquire_recursive>
 8003e0a:	bf00      	nop
 8003e0c:	24000324 	.word	0x24000324

08003e10 <__malloc_unlock>:
 8003e10:	4801      	ldr	r0, [pc, #4]	@ (8003e18 <__malloc_unlock+0x8>)
 8003e12:	f7ff bf0a 	b.w	8003c2a <__retarget_lock_release_recursive>
 8003e16:	bf00      	nop
 8003e18:	24000324 	.word	0x24000324

08003e1c <__ssputs_r>:
 8003e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e20:	688e      	ldr	r6, [r1, #8]
 8003e22:	461f      	mov	r7, r3
 8003e24:	42be      	cmp	r6, r7
 8003e26:	680b      	ldr	r3, [r1, #0]
 8003e28:	4682      	mov	sl, r0
 8003e2a:	460c      	mov	r4, r1
 8003e2c:	4690      	mov	r8, r2
 8003e2e:	d82d      	bhi.n	8003e8c <__ssputs_r+0x70>
 8003e30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003e38:	d026      	beq.n	8003e88 <__ssputs_r+0x6c>
 8003e3a:	6965      	ldr	r5, [r4, #20]
 8003e3c:	6909      	ldr	r1, [r1, #16]
 8003e3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e42:	eba3 0901 	sub.w	r9, r3, r1
 8003e46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e4a:	1c7b      	adds	r3, r7, #1
 8003e4c:	444b      	add	r3, r9
 8003e4e:	106d      	asrs	r5, r5, #1
 8003e50:	429d      	cmp	r5, r3
 8003e52:	bf38      	it	cc
 8003e54:	461d      	movcc	r5, r3
 8003e56:	0553      	lsls	r3, r2, #21
 8003e58:	d527      	bpl.n	8003eaa <__ssputs_r+0x8e>
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	f7ff ff52 	bl	8003d04 <_malloc_r>
 8003e60:	4606      	mov	r6, r0
 8003e62:	b360      	cbz	r0, 8003ebe <__ssputs_r+0xa2>
 8003e64:	6921      	ldr	r1, [r4, #16]
 8003e66:	464a      	mov	r2, r9
 8003e68:	f000 fae6 	bl	8004438 <memcpy>
 8003e6c:	89a3      	ldrh	r3, [r4, #12]
 8003e6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e76:	81a3      	strh	r3, [r4, #12]
 8003e78:	6126      	str	r6, [r4, #16]
 8003e7a:	6165      	str	r5, [r4, #20]
 8003e7c:	444e      	add	r6, r9
 8003e7e:	eba5 0509 	sub.w	r5, r5, r9
 8003e82:	6026      	str	r6, [r4, #0]
 8003e84:	60a5      	str	r5, [r4, #8]
 8003e86:	463e      	mov	r6, r7
 8003e88:	42be      	cmp	r6, r7
 8003e8a:	d900      	bls.n	8003e8e <__ssputs_r+0x72>
 8003e8c:	463e      	mov	r6, r7
 8003e8e:	6820      	ldr	r0, [r4, #0]
 8003e90:	4632      	mov	r2, r6
 8003e92:	4641      	mov	r1, r8
 8003e94:	f000 faa6 	bl	80043e4 <memmove>
 8003e98:	68a3      	ldr	r3, [r4, #8]
 8003e9a:	1b9b      	subs	r3, r3, r6
 8003e9c:	60a3      	str	r3, [r4, #8]
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	4433      	add	r3, r6
 8003ea2:	6023      	str	r3, [r4, #0]
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eaa:	462a      	mov	r2, r5
 8003eac:	f000 fad2 	bl	8004454 <_realloc_r>
 8003eb0:	4606      	mov	r6, r0
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	d1e0      	bne.n	8003e78 <__ssputs_r+0x5c>
 8003eb6:	6921      	ldr	r1, [r4, #16]
 8003eb8:	4650      	mov	r0, sl
 8003eba:	f7ff feb7 	bl	8003c2c <_free_r>
 8003ebe:	230c      	movs	r3, #12
 8003ec0:	f8ca 3000 	str.w	r3, [sl]
 8003ec4:	89a3      	ldrh	r3, [r4, #12]
 8003ec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003eca:	81a3      	strh	r3, [r4, #12]
 8003ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed0:	e7e9      	b.n	8003ea6 <__ssputs_r+0x8a>
	...

08003ed4 <_svfiprintf_r>:
 8003ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed8:	4698      	mov	r8, r3
 8003eda:	898b      	ldrh	r3, [r1, #12]
 8003edc:	061b      	lsls	r3, r3, #24
 8003ede:	b09d      	sub	sp, #116	@ 0x74
 8003ee0:	4607      	mov	r7, r0
 8003ee2:	460d      	mov	r5, r1
 8003ee4:	4614      	mov	r4, r2
 8003ee6:	d510      	bpl.n	8003f0a <_svfiprintf_r+0x36>
 8003ee8:	690b      	ldr	r3, [r1, #16]
 8003eea:	b973      	cbnz	r3, 8003f0a <_svfiprintf_r+0x36>
 8003eec:	2140      	movs	r1, #64	@ 0x40
 8003eee:	f7ff ff09 	bl	8003d04 <_malloc_r>
 8003ef2:	6028      	str	r0, [r5, #0]
 8003ef4:	6128      	str	r0, [r5, #16]
 8003ef6:	b930      	cbnz	r0, 8003f06 <_svfiprintf_r+0x32>
 8003ef8:	230c      	movs	r3, #12
 8003efa:	603b      	str	r3, [r7, #0]
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295
 8003f00:	b01d      	add	sp, #116	@ 0x74
 8003f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f06:	2340      	movs	r3, #64	@ 0x40
 8003f08:	616b      	str	r3, [r5, #20]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f0e:	2320      	movs	r3, #32
 8003f10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f14:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f18:	2330      	movs	r3, #48	@ 0x30
 8003f1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80040b8 <_svfiprintf_r+0x1e4>
 8003f1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f22:	f04f 0901 	mov.w	r9, #1
 8003f26:	4623      	mov	r3, r4
 8003f28:	469a      	mov	sl, r3
 8003f2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f2e:	b10a      	cbz	r2, 8003f34 <_svfiprintf_r+0x60>
 8003f30:	2a25      	cmp	r2, #37	@ 0x25
 8003f32:	d1f9      	bne.n	8003f28 <_svfiprintf_r+0x54>
 8003f34:	ebba 0b04 	subs.w	fp, sl, r4
 8003f38:	d00b      	beq.n	8003f52 <_svfiprintf_r+0x7e>
 8003f3a:	465b      	mov	r3, fp
 8003f3c:	4622      	mov	r2, r4
 8003f3e:	4629      	mov	r1, r5
 8003f40:	4638      	mov	r0, r7
 8003f42:	f7ff ff6b 	bl	8003e1c <__ssputs_r>
 8003f46:	3001      	adds	r0, #1
 8003f48:	f000 80a7 	beq.w	800409a <_svfiprintf_r+0x1c6>
 8003f4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f4e:	445a      	add	r2, fp
 8003f50:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f52:	f89a 3000 	ldrb.w	r3, [sl]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 809f 	beq.w	800409a <_svfiprintf_r+0x1c6>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f66:	f10a 0a01 	add.w	sl, sl, #1
 8003f6a:	9304      	str	r3, [sp, #16]
 8003f6c:	9307      	str	r3, [sp, #28]
 8003f6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f72:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f74:	4654      	mov	r4, sl
 8003f76:	2205      	movs	r2, #5
 8003f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f7c:	484e      	ldr	r0, [pc, #312]	@ (80040b8 <_svfiprintf_r+0x1e4>)
 8003f7e:	f7fc f9cf 	bl	8000320 <memchr>
 8003f82:	9a04      	ldr	r2, [sp, #16]
 8003f84:	b9d8      	cbnz	r0, 8003fbe <_svfiprintf_r+0xea>
 8003f86:	06d0      	lsls	r0, r2, #27
 8003f88:	bf44      	itt	mi
 8003f8a:	2320      	movmi	r3, #32
 8003f8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f90:	0711      	lsls	r1, r2, #28
 8003f92:	bf44      	itt	mi
 8003f94:	232b      	movmi	r3, #43	@ 0x2b
 8003f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fa0:	d015      	beq.n	8003fce <_svfiprintf_r+0xfa>
 8003fa2:	9a07      	ldr	r2, [sp, #28]
 8003fa4:	4654      	mov	r4, sl
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	f04f 0c0a 	mov.w	ip, #10
 8003fac:	4621      	mov	r1, r4
 8003fae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fb2:	3b30      	subs	r3, #48	@ 0x30
 8003fb4:	2b09      	cmp	r3, #9
 8003fb6:	d94b      	bls.n	8004050 <_svfiprintf_r+0x17c>
 8003fb8:	b1b0      	cbz	r0, 8003fe8 <_svfiprintf_r+0x114>
 8003fba:	9207      	str	r2, [sp, #28]
 8003fbc:	e014      	b.n	8003fe8 <_svfiprintf_r+0x114>
 8003fbe:	eba0 0308 	sub.w	r3, r0, r8
 8003fc2:	fa09 f303 	lsl.w	r3, r9, r3
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	9304      	str	r3, [sp, #16]
 8003fca:	46a2      	mov	sl, r4
 8003fcc:	e7d2      	b.n	8003f74 <_svfiprintf_r+0xa0>
 8003fce:	9b03      	ldr	r3, [sp, #12]
 8003fd0:	1d19      	adds	r1, r3, #4
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	9103      	str	r1, [sp, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	bfbb      	ittet	lt
 8003fda:	425b      	neglt	r3, r3
 8003fdc:	f042 0202 	orrlt.w	r2, r2, #2
 8003fe0:	9307      	strge	r3, [sp, #28]
 8003fe2:	9307      	strlt	r3, [sp, #28]
 8003fe4:	bfb8      	it	lt
 8003fe6:	9204      	strlt	r2, [sp, #16]
 8003fe8:	7823      	ldrb	r3, [r4, #0]
 8003fea:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fec:	d10a      	bne.n	8004004 <_svfiprintf_r+0x130>
 8003fee:	7863      	ldrb	r3, [r4, #1]
 8003ff0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ff2:	d132      	bne.n	800405a <_svfiprintf_r+0x186>
 8003ff4:	9b03      	ldr	r3, [sp, #12]
 8003ff6:	1d1a      	adds	r2, r3, #4
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	9203      	str	r2, [sp, #12]
 8003ffc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004000:	3402      	adds	r4, #2
 8004002:	9305      	str	r3, [sp, #20]
 8004004:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80040c8 <_svfiprintf_r+0x1f4>
 8004008:	7821      	ldrb	r1, [r4, #0]
 800400a:	2203      	movs	r2, #3
 800400c:	4650      	mov	r0, sl
 800400e:	f7fc f987 	bl	8000320 <memchr>
 8004012:	b138      	cbz	r0, 8004024 <_svfiprintf_r+0x150>
 8004014:	9b04      	ldr	r3, [sp, #16]
 8004016:	eba0 000a 	sub.w	r0, r0, sl
 800401a:	2240      	movs	r2, #64	@ 0x40
 800401c:	4082      	lsls	r2, r0
 800401e:	4313      	orrs	r3, r2
 8004020:	3401      	adds	r4, #1
 8004022:	9304      	str	r3, [sp, #16]
 8004024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004028:	4824      	ldr	r0, [pc, #144]	@ (80040bc <_svfiprintf_r+0x1e8>)
 800402a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800402e:	2206      	movs	r2, #6
 8004030:	f7fc f976 	bl	8000320 <memchr>
 8004034:	2800      	cmp	r0, #0
 8004036:	d036      	beq.n	80040a6 <_svfiprintf_r+0x1d2>
 8004038:	4b21      	ldr	r3, [pc, #132]	@ (80040c0 <_svfiprintf_r+0x1ec>)
 800403a:	bb1b      	cbnz	r3, 8004084 <_svfiprintf_r+0x1b0>
 800403c:	9b03      	ldr	r3, [sp, #12]
 800403e:	3307      	adds	r3, #7
 8004040:	f023 0307 	bic.w	r3, r3, #7
 8004044:	3308      	adds	r3, #8
 8004046:	9303      	str	r3, [sp, #12]
 8004048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800404a:	4433      	add	r3, r6
 800404c:	9309      	str	r3, [sp, #36]	@ 0x24
 800404e:	e76a      	b.n	8003f26 <_svfiprintf_r+0x52>
 8004050:	fb0c 3202 	mla	r2, ip, r2, r3
 8004054:	460c      	mov	r4, r1
 8004056:	2001      	movs	r0, #1
 8004058:	e7a8      	b.n	8003fac <_svfiprintf_r+0xd8>
 800405a:	2300      	movs	r3, #0
 800405c:	3401      	adds	r4, #1
 800405e:	9305      	str	r3, [sp, #20]
 8004060:	4619      	mov	r1, r3
 8004062:	f04f 0c0a 	mov.w	ip, #10
 8004066:	4620      	mov	r0, r4
 8004068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800406c:	3a30      	subs	r2, #48	@ 0x30
 800406e:	2a09      	cmp	r2, #9
 8004070:	d903      	bls.n	800407a <_svfiprintf_r+0x1a6>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0c6      	beq.n	8004004 <_svfiprintf_r+0x130>
 8004076:	9105      	str	r1, [sp, #20]
 8004078:	e7c4      	b.n	8004004 <_svfiprintf_r+0x130>
 800407a:	fb0c 2101 	mla	r1, ip, r1, r2
 800407e:	4604      	mov	r4, r0
 8004080:	2301      	movs	r3, #1
 8004082:	e7f0      	b.n	8004066 <_svfiprintf_r+0x192>
 8004084:	ab03      	add	r3, sp, #12
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	462a      	mov	r2, r5
 800408a:	4b0e      	ldr	r3, [pc, #56]	@ (80040c4 <_svfiprintf_r+0x1f0>)
 800408c:	a904      	add	r1, sp, #16
 800408e:	4638      	mov	r0, r7
 8004090:	f3af 8000 	nop.w
 8004094:	1c42      	adds	r2, r0, #1
 8004096:	4606      	mov	r6, r0
 8004098:	d1d6      	bne.n	8004048 <_svfiprintf_r+0x174>
 800409a:	89ab      	ldrh	r3, [r5, #12]
 800409c:	065b      	lsls	r3, r3, #25
 800409e:	f53f af2d 	bmi.w	8003efc <_svfiprintf_r+0x28>
 80040a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040a4:	e72c      	b.n	8003f00 <_svfiprintf_r+0x2c>
 80040a6:	ab03      	add	r3, sp, #12
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	462a      	mov	r2, r5
 80040ac:	4b05      	ldr	r3, [pc, #20]	@ (80040c4 <_svfiprintf_r+0x1f0>)
 80040ae:	a904      	add	r1, sp, #16
 80040b0:	4638      	mov	r0, r7
 80040b2:	f000 f879 	bl	80041a8 <_printf_i>
 80040b6:	e7ed      	b.n	8004094 <_svfiprintf_r+0x1c0>
 80040b8:	080045d8 	.word	0x080045d8
 80040bc:	080045e2 	.word	0x080045e2
 80040c0:	00000000 	.word	0x00000000
 80040c4:	08003e1d 	.word	0x08003e1d
 80040c8:	080045de 	.word	0x080045de

080040cc <_printf_common>:
 80040cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040d0:	4616      	mov	r6, r2
 80040d2:	4698      	mov	r8, r3
 80040d4:	688a      	ldr	r2, [r1, #8]
 80040d6:	690b      	ldr	r3, [r1, #16]
 80040d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040dc:	4293      	cmp	r3, r2
 80040de:	bfb8      	it	lt
 80040e0:	4613      	movlt	r3, r2
 80040e2:	6033      	str	r3, [r6, #0]
 80040e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80040e8:	4607      	mov	r7, r0
 80040ea:	460c      	mov	r4, r1
 80040ec:	b10a      	cbz	r2, 80040f2 <_printf_common+0x26>
 80040ee:	3301      	adds	r3, #1
 80040f0:	6033      	str	r3, [r6, #0]
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	0699      	lsls	r1, r3, #26
 80040f6:	bf42      	ittt	mi
 80040f8:	6833      	ldrmi	r3, [r6, #0]
 80040fa:	3302      	addmi	r3, #2
 80040fc:	6033      	strmi	r3, [r6, #0]
 80040fe:	6825      	ldr	r5, [r4, #0]
 8004100:	f015 0506 	ands.w	r5, r5, #6
 8004104:	d106      	bne.n	8004114 <_printf_common+0x48>
 8004106:	f104 0a19 	add.w	sl, r4, #25
 800410a:	68e3      	ldr	r3, [r4, #12]
 800410c:	6832      	ldr	r2, [r6, #0]
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	42ab      	cmp	r3, r5
 8004112:	dc26      	bgt.n	8004162 <_printf_common+0x96>
 8004114:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004118:	6822      	ldr	r2, [r4, #0]
 800411a:	3b00      	subs	r3, #0
 800411c:	bf18      	it	ne
 800411e:	2301      	movne	r3, #1
 8004120:	0692      	lsls	r2, r2, #26
 8004122:	d42b      	bmi.n	800417c <_printf_common+0xb0>
 8004124:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004128:	4641      	mov	r1, r8
 800412a:	4638      	mov	r0, r7
 800412c:	47c8      	blx	r9
 800412e:	3001      	adds	r0, #1
 8004130:	d01e      	beq.n	8004170 <_printf_common+0xa4>
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	6922      	ldr	r2, [r4, #16]
 8004136:	f003 0306 	and.w	r3, r3, #6
 800413a:	2b04      	cmp	r3, #4
 800413c:	bf02      	ittt	eq
 800413e:	68e5      	ldreq	r5, [r4, #12]
 8004140:	6833      	ldreq	r3, [r6, #0]
 8004142:	1aed      	subeq	r5, r5, r3
 8004144:	68a3      	ldr	r3, [r4, #8]
 8004146:	bf0c      	ite	eq
 8004148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800414c:	2500      	movne	r5, #0
 800414e:	4293      	cmp	r3, r2
 8004150:	bfc4      	itt	gt
 8004152:	1a9b      	subgt	r3, r3, r2
 8004154:	18ed      	addgt	r5, r5, r3
 8004156:	2600      	movs	r6, #0
 8004158:	341a      	adds	r4, #26
 800415a:	42b5      	cmp	r5, r6
 800415c:	d11a      	bne.n	8004194 <_printf_common+0xc8>
 800415e:	2000      	movs	r0, #0
 8004160:	e008      	b.n	8004174 <_printf_common+0xa8>
 8004162:	2301      	movs	r3, #1
 8004164:	4652      	mov	r2, sl
 8004166:	4641      	mov	r1, r8
 8004168:	4638      	mov	r0, r7
 800416a:	47c8      	blx	r9
 800416c:	3001      	adds	r0, #1
 800416e:	d103      	bne.n	8004178 <_printf_common+0xac>
 8004170:	f04f 30ff 	mov.w	r0, #4294967295
 8004174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004178:	3501      	adds	r5, #1
 800417a:	e7c6      	b.n	800410a <_printf_common+0x3e>
 800417c:	18e1      	adds	r1, r4, r3
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	2030      	movs	r0, #48	@ 0x30
 8004182:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004186:	4422      	add	r2, r4
 8004188:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800418c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004190:	3302      	adds	r3, #2
 8004192:	e7c7      	b.n	8004124 <_printf_common+0x58>
 8004194:	2301      	movs	r3, #1
 8004196:	4622      	mov	r2, r4
 8004198:	4641      	mov	r1, r8
 800419a:	4638      	mov	r0, r7
 800419c:	47c8      	blx	r9
 800419e:	3001      	adds	r0, #1
 80041a0:	d0e6      	beq.n	8004170 <_printf_common+0xa4>
 80041a2:	3601      	adds	r6, #1
 80041a4:	e7d9      	b.n	800415a <_printf_common+0x8e>
	...

080041a8 <_printf_i>:
 80041a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041ac:	7e0f      	ldrb	r7, [r1, #24]
 80041ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041b0:	2f78      	cmp	r7, #120	@ 0x78
 80041b2:	4691      	mov	r9, r2
 80041b4:	4680      	mov	r8, r0
 80041b6:	460c      	mov	r4, r1
 80041b8:	469a      	mov	sl, r3
 80041ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041be:	d807      	bhi.n	80041d0 <_printf_i+0x28>
 80041c0:	2f62      	cmp	r7, #98	@ 0x62
 80041c2:	d80a      	bhi.n	80041da <_printf_i+0x32>
 80041c4:	2f00      	cmp	r7, #0
 80041c6:	f000 80d1 	beq.w	800436c <_printf_i+0x1c4>
 80041ca:	2f58      	cmp	r7, #88	@ 0x58
 80041cc:	f000 80b8 	beq.w	8004340 <_printf_i+0x198>
 80041d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041d8:	e03a      	b.n	8004250 <_printf_i+0xa8>
 80041da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041de:	2b15      	cmp	r3, #21
 80041e0:	d8f6      	bhi.n	80041d0 <_printf_i+0x28>
 80041e2:	a101      	add	r1, pc, #4	@ (adr r1, 80041e8 <_printf_i+0x40>)
 80041e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041e8:	08004241 	.word	0x08004241
 80041ec:	08004255 	.word	0x08004255
 80041f0:	080041d1 	.word	0x080041d1
 80041f4:	080041d1 	.word	0x080041d1
 80041f8:	080041d1 	.word	0x080041d1
 80041fc:	080041d1 	.word	0x080041d1
 8004200:	08004255 	.word	0x08004255
 8004204:	080041d1 	.word	0x080041d1
 8004208:	080041d1 	.word	0x080041d1
 800420c:	080041d1 	.word	0x080041d1
 8004210:	080041d1 	.word	0x080041d1
 8004214:	08004353 	.word	0x08004353
 8004218:	0800427f 	.word	0x0800427f
 800421c:	0800430d 	.word	0x0800430d
 8004220:	080041d1 	.word	0x080041d1
 8004224:	080041d1 	.word	0x080041d1
 8004228:	08004375 	.word	0x08004375
 800422c:	080041d1 	.word	0x080041d1
 8004230:	0800427f 	.word	0x0800427f
 8004234:	080041d1 	.word	0x080041d1
 8004238:	080041d1 	.word	0x080041d1
 800423c:	08004315 	.word	0x08004315
 8004240:	6833      	ldr	r3, [r6, #0]
 8004242:	1d1a      	adds	r2, r3, #4
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6032      	str	r2, [r6, #0]
 8004248:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800424c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004250:	2301      	movs	r3, #1
 8004252:	e09c      	b.n	800438e <_printf_i+0x1e6>
 8004254:	6833      	ldr	r3, [r6, #0]
 8004256:	6820      	ldr	r0, [r4, #0]
 8004258:	1d19      	adds	r1, r3, #4
 800425a:	6031      	str	r1, [r6, #0]
 800425c:	0606      	lsls	r6, r0, #24
 800425e:	d501      	bpl.n	8004264 <_printf_i+0xbc>
 8004260:	681d      	ldr	r5, [r3, #0]
 8004262:	e003      	b.n	800426c <_printf_i+0xc4>
 8004264:	0645      	lsls	r5, r0, #25
 8004266:	d5fb      	bpl.n	8004260 <_printf_i+0xb8>
 8004268:	f9b3 5000 	ldrsh.w	r5, [r3]
 800426c:	2d00      	cmp	r5, #0
 800426e:	da03      	bge.n	8004278 <_printf_i+0xd0>
 8004270:	232d      	movs	r3, #45	@ 0x2d
 8004272:	426d      	negs	r5, r5
 8004274:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004278:	4858      	ldr	r0, [pc, #352]	@ (80043dc <_printf_i+0x234>)
 800427a:	230a      	movs	r3, #10
 800427c:	e011      	b.n	80042a2 <_printf_i+0xfa>
 800427e:	6821      	ldr	r1, [r4, #0]
 8004280:	6833      	ldr	r3, [r6, #0]
 8004282:	0608      	lsls	r0, r1, #24
 8004284:	f853 5b04 	ldr.w	r5, [r3], #4
 8004288:	d402      	bmi.n	8004290 <_printf_i+0xe8>
 800428a:	0649      	lsls	r1, r1, #25
 800428c:	bf48      	it	mi
 800428e:	b2ad      	uxthmi	r5, r5
 8004290:	2f6f      	cmp	r7, #111	@ 0x6f
 8004292:	4852      	ldr	r0, [pc, #328]	@ (80043dc <_printf_i+0x234>)
 8004294:	6033      	str	r3, [r6, #0]
 8004296:	bf14      	ite	ne
 8004298:	230a      	movne	r3, #10
 800429a:	2308      	moveq	r3, #8
 800429c:	2100      	movs	r1, #0
 800429e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042a2:	6866      	ldr	r6, [r4, #4]
 80042a4:	60a6      	str	r6, [r4, #8]
 80042a6:	2e00      	cmp	r6, #0
 80042a8:	db05      	blt.n	80042b6 <_printf_i+0x10e>
 80042aa:	6821      	ldr	r1, [r4, #0]
 80042ac:	432e      	orrs	r6, r5
 80042ae:	f021 0104 	bic.w	r1, r1, #4
 80042b2:	6021      	str	r1, [r4, #0]
 80042b4:	d04b      	beq.n	800434e <_printf_i+0x1a6>
 80042b6:	4616      	mov	r6, r2
 80042b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80042bc:	fb03 5711 	mls	r7, r3, r1, r5
 80042c0:	5dc7      	ldrb	r7, [r0, r7]
 80042c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042c6:	462f      	mov	r7, r5
 80042c8:	42bb      	cmp	r3, r7
 80042ca:	460d      	mov	r5, r1
 80042cc:	d9f4      	bls.n	80042b8 <_printf_i+0x110>
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d10b      	bne.n	80042ea <_printf_i+0x142>
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	07df      	lsls	r7, r3, #31
 80042d6:	d508      	bpl.n	80042ea <_printf_i+0x142>
 80042d8:	6923      	ldr	r3, [r4, #16]
 80042da:	6861      	ldr	r1, [r4, #4]
 80042dc:	4299      	cmp	r1, r3
 80042de:	bfde      	ittt	le
 80042e0:	2330      	movle	r3, #48	@ 0x30
 80042e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042ea:	1b92      	subs	r2, r2, r6
 80042ec:	6122      	str	r2, [r4, #16]
 80042ee:	f8cd a000 	str.w	sl, [sp]
 80042f2:	464b      	mov	r3, r9
 80042f4:	aa03      	add	r2, sp, #12
 80042f6:	4621      	mov	r1, r4
 80042f8:	4640      	mov	r0, r8
 80042fa:	f7ff fee7 	bl	80040cc <_printf_common>
 80042fe:	3001      	adds	r0, #1
 8004300:	d14a      	bne.n	8004398 <_printf_i+0x1f0>
 8004302:	f04f 30ff 	mov.w	r0, #4294967295
 8004306:	b004      	add	sp, #16
 8004308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	f043 0320 	orr.w	r3, r3, #32
 8004312:	6023      	str	r3, [r4, #0]
 8004314:	4832      	ldr	r0, [pc, #200]	@ (80043e0 <_printf_i+0x238>)
 8004316:	2778      	movs	r7, #120	@ 0x78
 8004318:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	6831      	ldr	r1, [r6, #0]
 8004320:	061f      	lsls	r7, r3, #24
 8004322:	f851 5b04 	ldr.w	r5, [r1], #4
 8004326:	d402      	bmi.n	800432e <_printf_i+0x186>
 8004328:	065f      	lsls	r7, r3, #25
 800432a:	bf48      	it	mi
 800432c:	b2ad      	uxthmi	r5, r5
 800432e:	6031      	str	r1, [r6, #0]
 8004330:	07d9      	lsls	r1, r3, #31
 8004332:	bf44      	itt	mi
 8004334:	f043 0320 	orrmi.w	r3, r3, #32
 8004338:	6023      	strmi	r3, [r4, #0]
 800433a:	b11d      	cbz	r5, 8004344 <_printf_i+0x19c>
 800433c:	2310      	movs	r3, #16
 800433e:	e7ad      	b.n	800429c <_printf_i+0xf4>
 8004340:	4826      	ldr	r0, [pc, #152]	@ (80043dc <_printf_i+0x234>)
 8004342:	e7e9      	b.n	8004318 <_printf_i+0x170>
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	f023 0320 	bic.w	r3, r3, #32
 800434a:	6023      	str	r3, [r4, #0]
 800434c:	e7f6      	b.n	800433c <_printf_i+0x194>
 800434e:	4616      	mov	r6, r2
 8004350:	e7bd      	b.n	80042ce <_printf_i+0x126>
 8004352:	6833      	ldr	r3, [r6, #0]
 8004354:	6825      	ldr	r5, [r4, #0]
 8004356:	6961      	ldr	r1, [r4, #20]
 8004358:	1d18      	adds	r0, r3, #4
 800435a:	6030      	str	r0, [r6, #0]
 800435c:	062e      	lsls	r6, r5, #24
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	d501      	bpl.n	8004366 <_printf_i+0x1be>
 8004362:	6019      	str	r1, [r3, #0]
 8004364:	e002      	b.n	800436c <_printf_i+0x1c4>
 8004366:	0668      	lsls	r0, r5, #25
 8004368:	d5fb      	bpl.n	8004362 <_printf_i+0x1ba>
 800436a:	8019      	strh	r1, [r3, #0]
 800436c:	2300      	movs	r3, #0
 800436e:	6123      	str	r3, [r4, #16]
 8004370:	4616      	mov	r6, r2
 8004372:	e7bc      	b.n	80042ee <_printf_i+0x146>
 8004374:	6833      	ldr	r3, [r6, #0]
 8004376:	1d1a      	adds	r2, r3, #4
 8004378:	6032      	str	r2, [r6, #0]
 800437a:	681e      	ldr	r6, [r3, #0]
 800437c:	6862      	ldr	r2, [r4, #4]
 800437e:	2100      	movs	r1, #0
 8004380:	4630      	mov	r0, r6
 8004382:	f7fb ffcd 	bl	8000320 <memchr>
 8004386:	b108      	cbz	r0, 800438c <_printf_i+0x1e4>
 8004388:	1b80      	subs	r0, r0, r6
 800438a:	6060      	str	r0, [r4, #4]
 800438c:	6863      	ldr	r3, [r4, #4]
 800438e:	6123      	str	r3, [r4, #16]
 8004390:	2300      	movs	r3, #0
 8004392:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004396:	e7aa      	b.n	80042ee <_printf_i+0x146>
 8004398:	6923      	ldr	r3, [r4, #16]
 800439a:	4632      	mov	r2, r6
 800439c:	4649      	mov	r1, r9
 800439e:	4640      	mov	r0, r8
 80043a0:	47d0      	blx	sl
 80043a2:	3001      	adds	r0, #1
 80043a4:	d0ad      	beq.n	8004302 <_printf_i+0x15a>
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	079b      	lsls	r3, r3, #30
 80043aa:	d413      	bmi.n	80043d4 <_printf_i+0x22c>
 80043ac:	68e0      	ldr	r0, [r4, #12]
 80043ae:	9b03      	ldr	r3, [sp, #12]
 80043b0:	4298      	cmp	r0, r3
 80043b2:	bfb8      	it	lt
 80043b4:	4618      	movlt	r0, r3
 80043b6:	e7a6      	b.n	8004306 <_printf_i+0x15e>
 80043b8:	2301      	movs	r3, #1
 80043ba:	4632      	mov	r2, r6
 80043bc:	4649      	mov	r1, r9
 80043be:	4640      	mov	r0, r8
 80043c0:	47d0      	blx	sl
 80043c2:	3001      	adds	r0, #1
 80043c4:	d09d      	beq.n	8004302 <_printf_i+0x15a>
 80043c6:	3501      	adds	r5, #1
 80043c8:	68e3      	ldr	r3, [r4, #12]
 80043ca:	9903      	ldr	r1, [sp, #12]
 80043cc:	1a5b      	subs	r3, r3, r1
 80043ce:	42ab      	cmp	r3, r5
 80043d0:	dcf2      	bgt.n	80043b8 <_printf_i+0x210>
 80043d2:	e7eb      	b.n	80043ac <_printf_i+0x204>
 80043d4:	2500      	movs	r5, #0
 80043d6:	f104 0619 	add.w	r6, r4, #25
 80043da:	e7f5      	b.n	80043c8 <_printf_i+0x220>
 80043dc:	080045e9 	.word	0x080045e9
 80043e0:	080045fa 	.word	0x080045fa

080043e4 <memmove>:
 80043e4:	4288      	cmp	r0, r1
 80043e6:	b510      	push	{r4, lr}
 80043e8:	eb01 0402 	add.w	r4, r1, r2
 80043ec:	d902      	bls.n	80043f4 <memmove+0x10>
 80043ee:	4284      	cmp	r4, r0
 80043f0:	4623      	mov	r3, r4
 80043f2:	d807      	bhi.n	8004404 <memmove+0x20>
 80043f4:	1e43      	subs	r3, r0, #1
 80043f6:	42a1      	cmp	r1, r4
 80043f8:	d008      	beq.n	800440c <memmove+0x28>
 80043fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004402:	e7f8      	b.n	80043f6 <memmove+0x12>
 8004404:	4402      	add	r2, r0
 8004406:	4601      	mov	r1, r0
 8004408:	428a      	cmp	r2, r1
 800440a:	d100      	bne.n	800440e <memmove+0x2a>
 800440c:	bd10      	pop	{r4, pc}
 800440e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004412:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004416:	e7f7      	b.n	8004408 <memmove+0x24>

08004418 <_sbrk_r>:
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	4d06      	ldr	r5, [pc, #24]	@ (8004434 <_sbrk_r+0x1c>)
 800441c:	2300      	movs	r3, #0
 800441e:	4604      	mov	r4, r0
 8004420:	4608      	mov	r0, r1
 8004422:	602b      	str	r3, [r5, #0]
 8004424:	f7fc fb8a 	bl	8000b3c <_sbrk>
 8004428:	1c43      	adds	r3, r0, #1
 800442a:	d102      	bne.n	8004432 <_sbrk_r+0x1a>
 800442c:	682b      	ldr	r3, [r5, #0]
 800442e:	b103      	cbz	r3, 8004432 <_sbrk_r+0x1a>
 8004430:	6023      	str	r3, [r4, #0]
 8004432:	bd38      	pop	{r3, r4, r5, pc}
 8004434:	24000320 	.word	0x24000320

08004438 <memcpy>:
 8004438:	440a      	add	r2, r1
 800443a:	4291      	cmp	r1, r2
 800443c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004440:	d100      	bne.n	8004444 <memcpy+0xc>
 8004442:	4770      	bx	lr
 8004444:	b510      	push	{r4, lr}
 8004446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800444a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800444e:	4291      	cmp	r1, r2
 8004450:	d1f9      	bne.n	8004446 <memcpy+0xe>
 8004452:	bd10      	pop	{r4, pc}

08004454 <_realloc_r>:
 8004454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004458:	4607      	mov	r7, r0
 800445a:	4614      	mov	r4, r2
 800445c:	460d      	mov	r5, r1
 800445e:	b921      	cbnz	r1, 800446a <_realloc_r+0x16>
 8004460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004464:	4611      	mov	r1, r2
 8004466:	f7ff bc4d 	b.w	8003d04 <_malloc_r>
 800446a:	b92a      	cbnz	r2, 8004478 <_realloc_r+0x24>
 800446c:	f7ff fbde 	bl	8003c2c <_free_r>
 8004470:	4625      	mov	r5, r4
 8004472:	4628      	mov	r0, r5
 8004474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004478:	f000 f81a 	bl	80044b0 <_malloc_usable_size_r>
 800447c:	4284      	cmp	r4, r0
 800447e:	4606      	mov	r6, r0
 8004480:	d802      	bhi.n	8004488 <_realloc_r+0x34>
 8004482:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004486:	d8f4      	bhi.n	8004472 <_realloc_r+0x1e>
 8004488:	4621      	mov	r1, r4
 800448a:	4638      	mov	r0, r7
 800448c:	f7ff fc3a 	bl	8003d04 <_malloc_r>
 8004490:	4680      	mov	r8, r0
 8004492:	b908      	cbnz	r0, 8004498 <_realloc_r+0x44>
 8004494:	4645      	mov	r5, r8
 8004496:	e7ec      	b.n	8004472 <_realloc_r+0x1e>
 8004498:	42b4      	cmp	r4, r6
 800449a:	4622      	mov	r2, r4
 800449c:	4629      	mov	r1, r5
 800449e:	bf28      	it	cs
 80044a0:	4632      	movcs	r2, r6
 80044a2:	f7ff ffc9 	bl	8004438 <memcpy>
 80044a6:	4629      	mov	r1, r5
 80044a8:	4638      	mov	r0, r7
 80044aa:	f7ff fbbf 	bl	8003c2c <_free_r>
 80044ae:	e7f1      	b.n	8004494 <_realloc_r+0x40>

080044b0 <_malloc_usable_size_r>:
 80044b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044b4:	1f18      	subs	r0, r3, #4
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	bfbc      	itt	lt
 80044ba:	580b      	ldrlt	r3, [r1, r0]
 80044bc:	18c0      	addlt	r0, r0, r3
 80044be:	4770      	bx	lr

080044c0 <_init>:
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	bf00      	nop
 80044c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c6:	bc08      	pop	{r3}
 80044c8:	469e      	mov	lr, r3
 80044ca:	4770      	bx	lr

080044cc <_fini>:
 80044cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ce:	bf00      	nop
 80044d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d2:	bc08      	pop	{r3}
 80044d4:	469e      	mov	lr, r3
 80044d6:	4770      	bx	lr
